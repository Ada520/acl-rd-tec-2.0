<?xml version="1.0" standalone="yes"?>

<Paper uid="J99-2003">
<Title>Tree Adjoining Grammars in a Fragment of the Lambek Calculus</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> This paper presents a logical formalization of Tree Adjoining Grammar (TAG) (Joshi, Levy and Takahashi 1975). TAG deals with lexicalized trees and two operations are available: substitution and adjunction. A set of (elementary) trees is associated to each lexical item. TAG is a tree-rewriting system: the derivation process consists in applying operations to trees in order to obtain a (derived) tree whose sequence of leaves is a sentence. Adjunction increases the expressive power of the formalism in such a way that noncontext-free languages can be represented although the parse process is done in polynomial time. Adjunction is generally presented as an insertion of one tree inside another, surrounding the subtree at the adjunction node. This seems to contradict standard logic, but we show (in Section 4) that some logical formalisms, namely a fragment of the Lambek calculus (LC, first introduced by Lambek \[1958\]), can handle adjunction.</Paragraph>
<Paragraph position="1"> We represent objects and operations of the TAG formalism in four steps: first trees (initial or derived) and the way they are constituted, then the operations (substitution and adjunction), and finally the elementary trees, i.e., the grammar. Labels occurring CILA, 70121 Bari, Italy. E-mail: abrusci@caspur.it t LIPN-CNRS URA 1507, 93430 Villetaneuse, France. E-maih cf@lipn.univ-paris13.fr LIPN-CNRS URA 1507, 93430 Villetaneuse, France. E-mail: jv@lipn.univ-paris13.fr ~) 1999 Association for Computational Linguistics Computational Linguistics Volume 25, Number 2 in the grammar constitute the set of propositional variables we need. The sequent calculus is a restriction of the standard sequent calculus for LC: there are identity axioms (A t- A) and rules for introducing connectives ((r) at left-hand side, o-- at right-hand side). In LC, / is usually used for o-- and * for (r). We use this notation throughout the paper to relate our formalization to noncommutative linear logic, o-is the left implication, @ is a noncommutative &amp;quot;and&amp;quot; connective. We prove that this restricted calculus is closed under two rules that mimic the grammatical operations.</Paragraph>
<Paragraph position="2"> Trees (initial or derived) are then obtained as the closure of the calculus under these two rules. In fact, trees are represented as (provable) sequents in an almost classical way. The right-hand side is the variable labeling the mother node of the tree. The left-hand side is a sequence of formulas of the following kinds: A for some leaf A of the tree, A o-- B1 (r) ... (r) Bn where A is the label of some internal node and Bi are the labels of its daughters, A o- A whenever A is a node where an adjunction can take place. This latter kind of formula can be grammatically interpreted as if such an A was split up into two nodes with the same label linked by some &amp;quot;soft&amp;quot; relation. The set of elementary trees of a TAG grammar ~' is then represented as a subset M of the sequents in the closure of the calculus under the two previous rules. We then prove the equivalence between the language generated in TAG by such a grammar G' and the closure under substitution and adjunction of the logical representation M. Note that our interpretation of adjunction is very close to the use of quasi trees described in Vijay-Shanker, (1992).</Paragraph>
<Paragraph position="3"> Besides this equivalence property, we relate parse trees to logical proofs, and to their geometric representation, proofnets. We briefly present proofnets, and the correspondence between proofs and proofnets, and give examples of parse trees viewed as proofnets. This enables a new point of view on the parse process. This process can be interpreted as an assembling of blocks (proofnets corresponding to elementary trees of the grammar), and also as a circulation of information through links relating nodes of the proofnets.</Paragraph>
<Paragraph position="4"> The remainder of the paper is organized in four parts. Section 2 describes the TAG formalism. We recall the terminology and show how substitution and adjunction operate on trees. Section 3 gives a survey of Lambek calculus viewed as a fragment of a noncommutative linear logic. We propose in Section 4 a logical formulation of TAG in a fragment of LC, and prove the correspondence between the two. Section 5 is devoted to the representation of proofs as proofnets; in this final section, we also study implications of this point of view. The proofs of propositions and theorems given in Section 4 are delayed to the appendix for the sake of clarity.</Paragraph>
</Section>
</Paper>

