<?xml version="1.0" standalone="yes"?>

<Paper uid="P87-1026">
<Title>FLUSH: A Flexible Lexicon Design</Title>
<Section position="1" start_page="0" end_page="186" type="abstr">
<SectionTitle>
Abstract
</SectionTitle>
<Paragraph position="0"> Approaches to natural language processing that use a phrasal lexicon have the advantage of easily handling linguistic constructions that might otherwise be extragrammatical. However, current phrasal lexicons are often too rigid: their phrasal entries fail to cover the more flexible constructions. FLUSH, for Flexible Lexicon Utilizing Specialized and Hierarchical knowledge, is a knowledge-based lexicon design that allows broad phrasal coverage.</Paragraph>
<Paragraph position="1"> I. Introduction Natural language processing systems must use a broad range of lexical knowledge to account for the syntactic use and meaning of words and constructs. The problem of understanding is compounded by the fact that language is full of nonproductive constructs--expressions whose meaning is not fully determined by examining their parts. To handle these constructs, some systems use a phrasal lexicon \[Becket, 1975, Wilensky and Arena, 1980b, Jacobs, .1985b, Steinacker and Buchberger, 1983, Dyer and Zernik, 1986\], a dictionary designed to make the representation of these specialized constructs easier.</Paragraph>
<Paragraph position="2"> The problem that phrasal lexicons have is that they are too rigid: the phrasal knowledge is entered in a way that makes it difficult to represent the many forms some expressions may take without treating each form as a distinct &amp;quot;phrase&amp;quot;. For example, expressions such as &amp;quot;send a message&amp;quot;, &amp;quot;give a hug&amp;quot;, &amp;quot;working directory&amp;quot;, and &amp;quot;pick up&amp;quot; may be handled as specialized phrases, but this overlooks similar expressions such as &amp;quot;give a message&amp;quot;, &amp;quot;get a kiss&amp;quot;, &amp;quot;working area&amp;quot;, and &amp;quot;take up&amp;quot;. Specialized constructs must be recognized, but much of their meaning as well as their flexible linguistic behavior may come from a more general level.</Paragraph>
<Paragraph position="3"> A solution to this problem of rigidity is to have a hierarchy of linguistic constructions, with the most specialized phrases grouped in categories with other phrases that behave similarly. The idea of a linguistic hierarchy is not novel, having roots in both linguistics \[Lockwood, 1972, Halliday, 1978\] and Artificial Intelligence \[Sondheimer et al., 1984\]. Incorporating phrasal knowledge into such a hierarchy was suggested in some AI work \[Wilensky and Arena, 1980a\], but the actual implementation of a hier- null archical phrasal lexicon requires substantial extensions to the phrasal representation of such work.</Paragraph>
<Paragraph position="4"> The Flexible Lexicon Utilizing Specific and Hierarchical knowledge (FLUSH) is one component in a suite of natural language processing tools being developed at the GE Research and Development Center to facilitate rapid assimilation of natural language processing technology to a wide variety of domains. FLUSH has characteristics of both traditional and phrasal lexicons, and the phrasal portion is partitioned into four classes of phrasal entries:  FLUSH's mechanisms for dealing with these four classes of specialized phrases make use of both general and specific knowledge to support extensibility.</Paragraph>
<Paragraph position="5"> FLUSH is the lexical component of a system called TRUMP (TRansportable Understanding Mechanism Package) \[Jacobs, 1986b\], used for language analysis in multiple domains. This paper will describe the phrasal knowledge base of FLUSH and its use in TRUMP.</Paragraph>
<Paragraph position="6"> II. Compound Lexical Knowledge in FLUSH Because the knowledge embodied in single word lexemes is not enough to account for nonproductive expressions, FLUSH contains phrasal entries called compound lezemes.</Paragraph>
<Paragraph position="7"> This section first illustrates how each of the four classes of compound lexemes is represented in FLUSH and then describes the algorithm for accessing the compound lexemes. So that the reader is better equipped to understand the figures in the rest of this paper, the next paragraph briefly introduces the knowledge representation scheme that is employed by FLUSH.</Paragraph>
<Paragraph position="8"> Knowledge representation in FLUSH is uses Ace \[Jacobs and Rau, 1984, Jacobs, 1985a\], a hierarchical knowledge representation framework based on structured inheritance. Most of Ace's basic elements can be found in other knowledge representation schemes (e.g., isa links, slots, and inheritance)\[Bobrow and Winograd, 1977, Brachman and Schmolze, 1985, Wilensky, 1986\], but Ace has the</Paragraph>
<Paragraph position="10"> unique ability to represent referential and metaphorical mappings among categories (see descriptions of re/and view below). The primitive semantic connections in an Ace hierarchy include the following: dominate -- defines an isa link between two categories.</Paragraph>
<Paragraph position="11"> This relation is labeled with a &amp;quot;D&amp;quot; in the figures. (dominate action running) means that running is an action~i.e., action dominates running.</Paragraph>
<Paragraph position="12"> manifest -- defines a constituent of a category. Unless a role-play applies (see below), this relation is labeled &amp;quot;m&amp;quot; in the figures.</Paragraph>
<Paragraph position="13"> (manifest action actor) means that an action has an actor associated with it. This is analogous to a slot in other knowledge representations.</Paragraph>
<Paragraph position="14"> role.play- establishes a relationship between a constituent (slot) of a dominating category and a constituent (slot) of a dominated category. In the figures, this relation is labeled with the appropriate role name for the constituent.</Paragraph>
<Paragraph position="15"> (dominate action running (role-play actor runner)) means that in running, the role of actor (inherited from action) is played by the runner.</Paragraph>
<Paragraph position="16"> ref -- defines a mapping between an entity in the linguistic hierarchy and an entity in the conceptual hierarchy. This relation is labeled &amp;quot;re\]&amp;quot; in the figures. (ref lex-run running) means that when the lexical category lez-run is invoked, the concept of running should be invoked as well. This is the main channel through which semantic interpretation is accomplished. null view -- defines a metaphorical mapping between two categories in the conceptual hierarchy.</Paragraph>
<Paragraph position="17"> (view transfer-event action (role-play source actor)) means that in certain cases, an action can be metaphorically viewed as a $ransfer.event, with the  actor viewed as the source of the transfer.</Paragraph>
<Paragraph position="18"> This brief introduction to Ace will help the reader understand the descriptions of the representation and access of compound lexemes that are presented in the next two subsections.</Paragraph>
</Section>
</Paper>

