<?xml version="1.0" standalone="yes"?>

<Paper uid="P87-1013">
<Title>Xerox PARC</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
2 Introduction
</SectionTitle>
<Paragraph position="0"> Our basic approach to the problem of syntactic description is to use logical formulas to put conditions or constraints on ordering of constituents, ancestor and descendant relations, and feature attribute information in syntactic structures. The present version of our logic has predicates specifically designed for these purposes.</Paragraph>
<Paragraph position="1"> A grammar can be considered as just a logical formula, and the structures satisfying the formula are the syntactic structures for the sentences of the language. This notion goes back to DCG's \[0\], but our formulation is quite different. In particular, it builds on the logic of Kasper and Rounds \[3\], a logic intended specifically to describe feature structures.</Paragraph>
<Paragraph position="2"> The formulation has several new aspects. First, it introduces the oriented feature structure as the primary syntactic structure. One can think of these structures as parse trees superimposed on directed graphs, although the general definition allows much more flexibility. In fact, our notation does away with the parse tree altogether. null A second aspect of the notation is its treatment of word order. Our logic allows small grammars to define free-word order languages over large vocabularies in a way not possible with standard ID/LP rules. It is not clear whether or not this treatment of word order was intended by Kay, but the issue naturally arose during the process of making this model precise. (Joshi \[1\] has adopted much the same conventions in tree adjunct grammar.) A third aspect of our treatment is the use of fixed-point formulas to introduce recursion into grammars. This idea is implicit in DCG's, and has been made explicit in the logics CLFP and ILFP \[9\]. We give a simple way of expressing the semantics of these formulas which corresponds closely to the usual notion of grammatical derivations. There is an interesting use of type ~ariables to describe syntactic categories and/or constructions.</Paragraph>
<Paragraph position="3"> We illustrate the power of the notation by sketching how the constructions of relational grammar \[7\] can be formulated in the logic. To our knowledge, this is the first attempt to interpret the relational ideas in a fully mathematical framework. Although relational networks themselves have been precisely specified, there does not seem to be a precise statement of how relational derivations take place. We do not claim that our formalization is the one intended by Postal and Perlmutter, but we do claim that our notation shows clearly the relationship of relational to transformational grammars on one hand, and to lexical-functional grammars on the other.</Paragraph>
<Paragraph position="4"> Finally, we prove that the satisfiability problem for our logic is undecidable. This should perhaps be an expected result, because the proof relies on simulating Turing machine computations in a grammar, and follows the standard undecidability arguments. The satisfiability problem is not quite the same problem as the aniversal recognition problem, however, and with mild conditions on derivations similar to those proposed for LFG \[2\], the latter problem should become decidable.</Paragraph>
<Paragraph position="5"> We must leave efficiency questions unexamined in this paper. The notation has not been implemented. We view this notation as a temporary one, and anticipate that many revisions and extensions will be necessary if it is to be implemented at all. Of course, FUG itself could be considered as an implementation, but we have added the word order relations to our logic, which are not explicit in FUG.</Paragraph>
<Paragraph position="6"> In this paper, which is not full because of space limitations, we will give definitions and examples in Section 3; then will sketch the relational application in Section 4, and will conclude with the undecidability result and some final remarks.</Paragraph>
</Section>
</Paper>

