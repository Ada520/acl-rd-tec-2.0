<?xml version="1.0" standalone="yes"?>

<Paper uid="T87-1017">
<Title>Possible Implications of Connectionism</Title>
<Section position="2" start_page="0" end_page="81" type="abstr">
<SectionTitle>
1. What About Symbols?
</SectionTitle>
<Paragraph position="0"> The first thing we have to grapple with is the fact that the connectionists are operating within a sphere of assumptions that is problematic to mainstream AI research. The cornerstone of mainstream AI is the idea of symbol manipulation. Interestingly, many of the most exciting efforts in connectionism {the &amp;quot;Parallel Distributed Processing&amp;quot; (PDP) models described by Rumelhart &amp; McClelland (1986)) do not utilize explicit symbols at all. But this does not prevent PDP systems from manipulating information: it just means that a concept in a PDP system is not present in that system as an explicit data structure. Concepts (and attributes and categories) manifest themselves as patterns of activation distributed throughout a strongly connected network of nodes, where the nodes ~by themselves signify nothing in particular. Distributed representations of this sort can be manipulated to exhibit useful I/O behavior, but our traditional ideas of data and control fail to provide the descriptive framework needed to understand these systems.</Paragraph>
<Paragraph position="1"> The implications of this are important. In mainstream AI, a successful system can be said to embody a theor~ of human information processing. But this claim is evaluated on the basis of what we understand about that program. An explanation at the level of machine code is not very useful, but a high level flow chart might be. The PDP systems do not lend themselves to this explanatory aspect of AI very readily.</Paragraph>
<Paragraph position="2">  &amp;quot;The strength of this more complicated kind of representation does not lie in its notational convenience or its ease of implementation in a conventional computer, but rather in the efficiency with which it makes use of the processing abilities of networks of simple, neuron-like computing elements.&amp;quot; (Hinton, McClelland, Rumelhart 1986).</Paragraph>
<Paragraph position="3"> In some sense, the task of understanding how a given PDP system works is very much like trying to understand machine code. This should not be surprising, given the intimacy of PDP models with low-level computing mechanisms, but it does tend to alienate those elements of the AI community who are interested in &amp;quot;understanding&amp;quot; their programs in traditional information processing terms. It is no small accomplishment to stop thinking in terms of primitive symbols, data structures, and procedures, in order to start thinking in terms of input vectors, linear thresholds, and necessary conditions for stabilization.</Paragraph>
<Paragraph position="4"> While the presence or absence of explicit symbols may at first seem to be an insurmountable hurdle to any intelligent comparisons between AI and connectionism, it is sobering to consider what the connectionists have accomplished using distributed representations. Connectionists have traditionally looked at &amp;quot;low-level&amp;quot;&amp;quot; information processing problems: motor feedback, stereoscopic vision processing, visual letter recognition, and lexical access for natural language are typical examples. If the AI community has been slow to embrace the lessons of connectionism, it is &amp;quot;because mainstream AI is more concerned with &amp;quot;high-level&amp;quot; information processing: text comprehension, problem solving, scene recognition, and inductive learning are closer to the heart of mainstream AI. But now we are beginning to see connectionism &amp;quot;trickle-up&amp;quot; into higher task orientations.</Paragraph>
<Paragraph position="5"> Connectionist systems are now being designed to:  1. Translate sentences into case-frame representations (McClelland &amp; Kawamoto 1986) 2. Index causal chains for narrative recall (Golden 1986) 3. Handle the script activation problem (Sharkey, Sutcliffe, and Wobcke 1986) 4. Index memory for a case-based reasoner (Stanfill &amp; Waltz 1986) 5. Store and retrieve relational data (Hinton 1986)  These tasks are firmly situated in the realms of &amp;quot;high-level&amp;quot; information processing - or at least they used to be. No one is claiming to have solved these problems, but one cannot resist the feeling that a breath of fresh air is clearing a musty old closet.</Paragraph>
</Section>
</Paper>

