<?xml version="1.0" standalone="yes"?>

<Paper uid="J79-1025">
<Title>PROGRAMMI0NG LANGUAGES</Title>
<Section position="1" start_page="0" end_page="3" type="abstr">
<SectionTitle>
SUMMARY
</SectionTitle>
<Paragraph position="0"> I offer a tentative answer to a quesCion poaed by Leo $poetel: 'what type of automata would produce and use structures such 88 natural languages rpossess3 '? loam ChowIcy hae pointed out that natural languages share certain common structural caaracteriatics, and he argues that these 1ing~ierkl.c universals have implications for our understanding of hum- menta.1 processes. In my The Borm o$ ME-- null (1975), I 8ug~est that we should develop a model of human mental machinem by'deaigning an abstract automaton which accepts progrm-3 haviag the range of structures universally found in the eemaatic analyses of sentences of natural languages. !Phis article makes concrete proposals about such an automaton.</Paragraph>
<Paragraph position="1"> An automaton ie defined by specifying a set of states, a set of acceptable programs. an input function mapping pairs of program and prior state into new st*tes, and a successor-state rebation which permits the automaton to move spontaneously from one state to another, either deterministically or non-deterninistically. In an automata-theoretic model of human rental processes, sentences will play the part of programs, automaton-&amp;ate8 will correspond to structures of knowledge or belief, the input function will speoify how a person's belief-structure is altered by the sentences he hears or ~eads, and the successor-state relation wil1,correspond to the rules of inference by which dne derives new beliefs from the beliefs one alread$ ha, A computer is a physical realization of an automaton; but an automaton modelling the behaviour of users of natural lmguage will certainlx be very different from the automata which and concentraee on semantic features which appear to be constant for all natural langtaages .) !Che model I propose turns out, as an unexpected bonus, to offer satisfying solutions to a number of controversial points of philosophioal logic. On the other hand, it remains to be seen whether the model can successfully be extended beyond the subset of natural language it now covers; I conclude by listing  some unsolved problems.</Paragraph>
<Paragraph position="2"> TABm OJ' CONTENTS 1. Introduction ... 6 2. Definition of automaton ... 7 3.</Paragraph>
<Paragraph position="3"> Grammars and inference rules for natural Languages ... 9 4. High-level language$ v. machine codes ... 10 5. A sample high-level language: API; ... 12 6. APL defined in terms of 9APL-apeaking automaton' 14 7. 1Perfarmance4 v. 'competence' in natural and programming languages *-. 21 8. English to be defined in terms of English-speaking automaton ... 22 9. Noan phrases are elements of an automaton state ... 25 10. Elements are at various distances from a focus ... 29 19. Proper aames and common nouns ... 30 1'2. The genitive construction . 32 13. Deiotics ... 33 14. Clauses v, noun phrases . 33 15. Relative clauses ... 39 '16. Formalization of the distance metric ... 40 17. The Englieh-speaking automaton define4 ... 42 18.</Paragraph>
<Paragraph position="4"> Outputa of the Englieh-speaking automaton ... 91 19. Language v, observation as input ... 52 20.</Paragraph>
<Paragraph position="5"> Natural and programming languages compared and contrasted m** 57 2-4; Philosophical w attractions of the theory ... 58 22. Unsolved problems ... $9 23.. Conclusion . . . 67</Paragraph>
<Paragraph position="7"> !Phis article proposes a tentative answer to a question posed by Apostel (1971: 22) : ''what type of automata would produce and use structures such as natural languages [possessll? I Chomsky has pointed out that natural languages show common structural characteristiss: each natural language is derived transformationally from a context-free phz?ase-structure language.* Chomsky (e.g. 1968, and cf. Lenneberg 1967) argues that this shows that we have innate psychological machinery for processing language. I have suggested ampso son 1972a, 1975a:-ch, 8) that an rruitfux way to construct a theory of such psychological machinery will be to view the relation between sentence and hearer as analogous to that between computer program and computer. Here I wish to offer some concrete proposals about the ~sychological machinery involved in the comprehension of natnrgl language, based on comparihg the structure of natural language with that of actual computer programming langu- null ages in practical use.</Paragraph>
<Paragraph position="8">  I insert qpossess', side I prefer to speak of languases structures rather than being structures. I discuss own comments on this question elsewhere (Sampson  I show elsewhere ampso son 1973b) that this is an empirical hypothesis, despite the findings of Peters &amp; Bitchie and others that ang recursively enumerable language can be generA ated by some transformational grammar.</Paragraph>
<Paragraph position="9"> 3~hhe theory to be presented here is somewhat comparable with that of Winograd (1972), although constructed independently. By comparison with Winograd I am less interested in the practical problems of cormaunicating with an automaton in idiomatio, 'surface-structurea English, and mare interested in what chqacteristiccs of the huinm language-processing automatondare suggested by those features of English which appear to be universal, 2. It is usual to distinguish the terms automaton and - computer: an automaton is a mathematical abstraction of a certain kind, while a computer is a physical object designed to embody the properties of a particular automaton (cf. Putnam tl9603 1961: 147), as an ink line on a sheet of graph paper is designed to embody the properties $of a continuous function; thus e.g. a computer 3ut not an automaton, may break down, as a graph, but not a function, may be smudged. Naturally, though, the only automata Tor which there exist corresponding colpputers are automata .which it is both posaible ana useful to realize physically; so the class of computers represents a rather narrow subset of the class of automata as defined below. We shall sometimes speak of 'computersv meaning 'automata of the class to which actual computers correspond1; category mistakes need not bother us if we are alert to their dangers.</Paragraph>
<Paragraph position="10"> We may define an automaton as a quadruple ( f, 9, 9- Int, - Suc), in which 9 is a (finite or infinite) set of states, &amp; is a (finite or infinite) language (i.e. set qf strings of symbols), - Int is a partial function from 9 X 2 (the Cartesian product of 9 with $) into f (the input function), apd Suc is a relation on - - f P,-e. asubset of YX (the successor.-pltate relattion). 8 is called the machine language of 4; a aember of &amp; ia a proecram.</Paragraph>
<Paragraph position="11"> We treat the flow of time as a -succession of disczlete instants (corresponding to cycles of actual computers).</Paragraph>
<Paragraph position="12"> Between any adjacent pair of instants, the automaton is in some state - S 8 9, At any given instant, a program may be input. If the automaton is in -... S and P L &amp; &amp;, is input, the automaton moves to the state -I Int(S, - XI); if (g, It) # dom(Int), wa say that - L is undefined for - 6 (and no change of state occurs), If no program is input, the automaton moves to some state - 8' such that --- S Suc St, provided there is such a state - St.  (Otherwise, no change of state occurs, and - S is called a stopping state.) If - Suo is a (partial) function (i.e. if for each - S there is at most one state - St such that -- S Suc S), the automaton is deterministic .</Paragraph>
<Paragraph position="13"> Bn ordinary digital computer is a deterministic automaton wh~se states are realized as different distributions oq elect~ical charge (representing the digits 0 an&amp; I) over the 'feprite cores in a store together with a set of working registers and an add.ress counter. The number of states of such an automaton 1s finite but very large: a simple computer with a storb containing 4096 words of 16 bits together with a single working register would have on the order of 5 x 10 79736 states.</Paragraph>
<Paragraph position="14"> he programs of the machine language of. such an automaton will eonsist of sequences of machine words not exceeding the size oi the store, and thus the machine language will again be finite. The input of such a program containing, say, - n words w&amp;ll cause the automaton to load these words 'in-t;o the first a places in it store, replacing the current contents, and to  set the address counter to 7. 'Phe successor-state function is determined by the number in the addzess-counter together with the code translating machine words into in$.%mct2ons; whenever the counzer contain8 the number - i the au-t;omaton ch-es its state by executing the instruction in the I - ith place in seore and incrementing the :ounter by one, A proper subset of the automaton's states are stopping states: whenever the storage word indicated by the address counter is not the code of any instruction, the machine stops.</Paragraph>
<Paragraph position="15"> For any state - S of a deterministic automaton, we may use the term succession of S for the seauence of states the auto-- null maton will pass through under th~ control .of its successor-state function, beginning with - S and ending) (if the succession is finite) at a stopping-state. A computer is arranged so that, on entering certain states, it performs certain output actions (e.g. it prints a symbolic representation of part of its internal state onto paper). The art of programming such a computer consists of finding an input program which moves the computer into a state, the succession of which causes the computer to perform ~ctions constituting a solution to the programmer's problem, while being finite and as short as possible.</Paragraph>
</Section>
</Paper>

