<?xml version="1.0" standalone="yes"?>

<Paper uid="C88-1008">
<Title>The E-Framework: A Formalism for Natural Language Processing.</Title>
<Section position="2" start_page="0" end_page="56" type="abstr">
<SectionTitle>
2. Background.
</SectionTitle>
<Paragraph position="0"> The large number of transfer components in a multi-lingual translation system obviously makes it desirable to keep them as small and simple as possible. To achieve this, language specific phenomena are neutralized in Eurotra's interface representation of a text, and the main burden of work is shifted to the analysis/synthesis components. This means that every monolingual component expresses a rather complex two-way relation  between abstract representation and actual text.</Paragraph>
<Paragraph position="1"> 3. Overview of the E-Framework.</Paragraph>
<Paragraph position="2">  The E-Framework consists of just two formal devices, namely a generator and a translator. The generator and the translator are abstract devices which interpret grammars and t-modules, respectively.</Paragraph>
<Paragraph position="3"> A grammar defines a level of representation, and a t-module states the relation between source level trees and their corresponding partial descriptions to be completed by the generator at the target level.</Paragraph>
<Paragraph position="4"> Figure 1 below gives a schematic overview. 3.1. Representational object and descriptor. Before we describe the translator and generator devices in greater detail, it is useful to have a look at the nature of the material they produce.</Paragraph>
<Paragraph position="5"> The generator produces representational objects. A representational object is a tree in which the nodes are feat%ire bt~dleso A feature bundle is a set of simple features of the attribute-value type.</Paragraph>
<Paragraph position="6"> A representational object is fully described by the feature bundles and the dominance and precedence relations between themdeg By leaving out features and/or information about the relations between feature bundles~ we obviously have only a partial description of the object. These partial descriptions we call descriptors, and they are what the translator feeds to the generatordeg</Paragraph>
<Paragraph position="8"> TIll? tr anslatox uses a source level representational object and the specifications i:0 a t-.-module to p~:-oduce a descripto&lt; for the targut \[\[.~Velo A t-module is dec\]arative; 9t:: consists of t~ ~.~\].e~ which describe the relal:ion between source Level representational objects and t~.rget \]eve\]. descriptorsdeg A t-rule consists of a l~d!t ha~d ~id.e which describes ~t tree at: the source level~ and a ~'ight ha~d sJ.,d~\] which states the corresponding desc~cipto)~ at the target \].cvelo The left hand side of a t&lt;cule is, a tree description where the feature bundles to be included in the target descYiptor are marked w#\[th JdC/.ntifierso 'J.'he right hal~d side is a definition of a descriptor J.n ~he f!orm of identJ.f;k~_rs,, and domJ.nance and prucedenee relations between th(~mo Feature bundles represented by identifiers on the r{_ght hand ~'~ide ar\[; by default copies of the source \[Level feature bundles,, but t-. :!:tt\].es may be staked to specify addition~ change oc deletion of featuresdeg A single t-rule only defines the descriptor for the part of a source level tree matching the description on its left hand side. The set of t-.rLlles to be used in the production of the descriptor for the full source level tree, J,~ selected by the translator in a top-odown driven match of the tree against the \].eft hand sidesdeg \]~f some part of the tree doe~.: not match the left hand side of any t-rule in a t-qnodule, the translator copies the dominance and precedence informati.on fxom the source objectdeg Since tile descriptors are only partial target object descriptions, they must be completed; this is done autonomously by the generato:,: devicedeg So, compared to tree to tree transducers~ the translator device of the E-F:,~mnework can be characterized as quite weak: The translator can only provide guidance for the construction of target objects; it cannot buJ, ld theln itselfdeg 3deg3deg 'l~e Generator.</Paragraph>
<Paragraph position="9"> The generator uses the level definition contained in a grammar and the descriptors provided by the translator to create representational objects.</Paragraph>
<Paragraph position="10"> The granmlar itself is declarative; it consists of a set of g-rules, each of which is a description of legal parts of representational objects.</Paragraph>
<Paragraph position="11"> The generator completes a descriptor output from the translator by repeatedly applying g-ruleso The application of rules is nond(~terministie; it continues until no more information can be added and all information from the original descriptor has been validated by at least one g-ruleo This results Jn one or more representational objectsdeg If some information is not validated, the generator cannot produce a legal representational object. Consequently, the attempt at completion failsdeg The application of a g-rule is a customized version of unification which not only permits addition of features, but also of structural information and entire feature bundles.</Paragraph>
<Paragraph position="12"> This property of g-~rule application is the key reason why a t-module need only specify very little; the E-Framework generator device has autonomous power to finish a partial description, and the descriptions in the grm~lars are not only used for checking structures, but also for constructing them.</Paragraph>
<Paragraph position="14"></Paragraph>
</Section>
</Paper>

