<?xml version="1.0" standalone="yes"?>

<Paper uid="C88-1032">
<Title>Word Manager. A System for the Definition, Access and Maintenance of Lexical Databases</Title>
<Section position="1" start_page="0" end_page="154" type="abstr">
<SectionTitle>
Abstract
</SectionTitle>
<Paragraph position="0"> This paper describes Word Manager, a system which is currently the object of a research project at the University of Zfirich Computer Science Department.</Paragraph>
<Paragraph position="1"> Word Manager supports the definition, access and maintenance of lexical databases. It comprises a formal language for the implemenation of morphological knowledge. This formal language is integrated in a graphics-oriented, high-level user Interface and is language independent. The project is now in the prototyping phase where parts of the software are pretty far advanced (the user interface) and .others are still rudimentary (the rule compilcr/runtime system). The design of the system was strongly influenced by Koskenniemi's two-level model /Koskenniemi 1983/, its successors /Bear 1986/, /Black 1986/, /Borin 1986/, /Darymple 1987/, the ANSI-SPARC 3-Schema Concept /ANSI-X3-SPARC 1975/ and visual programming techniques /Bocker 1986/, /Myers 1986/: We will focus the discussion on one aspect: the user interfacing for the construction of the lexlcal data base.</Paragraph>
<Paragraph position="2"> I. Introduction As i have argued elsewhere /Domenig 1986, 1987a, 1987b/, a dedicated system yields many advantages for the implementation, use and maintenance of lexical databases. The functionality of general purpose database management systems - e.g.</Paragraph>
<Paragraph position="3"> relational ones - ls too limited for lexlcal databases because they are not tuned to the task at hand; In particular, they do not provide for a formalism which is suited to describe linguistic knowledge. The reason wily we would like to have such a formalism is that it allows us to take advantage of a computer's processing abilities, i.e. we may construct a lexieal database which is not only a collection of purely 'static' information - a set of entries - but has 'dynamic ~ capabilities. For instance, the latter might be that it can analyse and generate inflected or composed word forms. &amp;quot;What would be the advantage of that?&amp;quot; one might ask. &amp;quot;It is no problem to add on these capabilities to a purely 'static' set of entries stored within a commercially available database management system by writing programs in the host language to this systemI&amp;quot; The answer is: there are a lot of advantages and I hope to clarify some of them in this paper. A dedicated system supports the construction, use and maintenance of lexical databases much more directly than a general purpose database management system in conjunction with a conventional programming  language interface. Word Manager was designed as such a system, whereas Word Manager does not necessarily manage all the information stored in a lexical database. At this stage of the project, it manages only morphological knowledge, i.e. it would  be quite feasible to use it as a front-end to a database managed by a general purpose system.</Paragraph>
<Paragraph position="4"> 2. Overview of the user interfacing Word Manager distinguishes two quite different  Interfaces for the construction and maintenance of lexical databases: one for the specification of what I term conceptual knowledge (linguist interface) and one for the specification of what I call nonconceptual knowledge (lexicographer interface). The former is the place where the kind of morphological knowledge is defined which can be typically found In grammars, the latter is a dialogue-oriented interface for the entering of the bulk of the data.</Paragraph>
<Paragraph position="5"> The relationship between the two Interfaces is one of a strong dependency, i.e. the lexicographer interface depends very much on the specifications In the linguist interface. Much of the machinelexicographer dialogue can be inferred automatically from these specifications. The formalism employed in the linguist interface was designed to be powerful enough to implement morphological knowledge of several natural languages on the one hand, yet dedicated enough to be easy to handle for linguists. Moreover, it provides the opportunity to experiment with different conceptual approaches within a certain framework. The following section will oufline it.</Paragraph>
<Paragraph position="6"> 3. The specification of morphological knowledge in the linguist interface The linguist interface is conceived as a highly controlled environment which takes advantage of the latest hard- and software technology. This means that the user does not communicate with the computer on the level of its operating system except for when the application is started. On the level of the operating system, each morphological knowledge specification is represented by a so-called document /con (the two rightmost icons in Fig. 1 are document icons). By mousing such an icon, the user may start the application and load the specification stored in the document. Alternatively, he could start it by mousing the application Icon (the leftmost icon In Fig. I is the application icon). Within the application environment, each document (morphological knowledge specification) is represented by a so-</Paragraph>
</Section>
</Paper>

