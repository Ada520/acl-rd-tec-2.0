<?xml version="1.0" standalone="yes"?>

<Paper uid="J93-4001">
<Title>The Interface between Phrasal and Functional Constraints</Title>
<Section position="2" start_page="0" end_page="572" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> A wide range of modern grammatical formalisms divide the task of linguistic specification either explicitly or implicitly into a context-free component of phrasal constraints and a separate component of attribute-value or functional constraints. Lexical-Functional Grammar (Kaplan and Bresnan 1982), for example, is very explicit in assigning both a phrase structure tree and an attribute-value functional structure to every sentence of a language. Generalized Phrase Structure Grammar (Gazdar, Klein, Pullum, and Sag 1985) assigns a phrase structure tree whose categories are attribute-value structures. For Functional Unification Grammar (Kay 1979) and other unification formalisms that evolved from it (such as HPSG \[Pollard and Sag 1987\]), the phrase structure is more implicit, showing up as the record of the control strategy that recursively reinstantiates the collection of attribute-value constraints from the grammar.</Paragraph>
<Paragraph position="1"> For Definite Clause Grammars (Pereira and Warren 1980) the phrase structure is implicit in the unification of the concealed string-position variables and the recursive reinstantiation of the additional logic variables that carry functional information.</Paragraph>
<Paragraph position="2"> The computational problem of recognizing whether a given string belongs to the language of a grammar also divides into two parts, since it must be determined that the string satisfies both the phrasal and functional constraints. These two types of constraints have different computational properties. It is well known that context-free phrase structure constraints can be solved in time polynomial in the length of the input sentence, whereas all known algorithms for solving Boolean combinations of  the constraint system.</Paragraph>
<Paragraph position="3"> There have been a number of approaches for implementing such hybrid constraint systems. In one approach the context-free constraints are converted to the form of more general functional constraints so that a general-purpose constraint satisfaction method can uniformly solve all constraints. While this has the advantage of simplicity and elegance, it usually gains no advantage from the special properties of the context-free subsystem. The original implementation for Definite Clause Grammars followed this strategy by translating the grammar into equivalent Prolog clauses and using the general Prolog interpreter to solve them.</Paragraph>
<Paragraph position="4"> On the other hand, functional constraints of a sufficiently restricted kind can be translated into context-free phrasal constraints and solved with special purpose mechanisms. This is true, for example, of all GPSG feature constraints. In the extreme, a GPSG could be completely converted to an equivalent context-free one and processed with only phrasal mechanisms, but the fast polynomial bound may then be overwhelmed by an enormous grammar-size constant, making this approach computationally infeasible for any realistic grammar (Barton, Berwick, and Ristad 1987). More common approaches involve hybrid implementations that attempt to take advantage of the special computational properties of phrasal constraints while also handling the general expressiveness of arbitrary feature constraints. Although this sounds good in principle, it turns out to be hard to accomplish in practice. An obvious first approach, for example, is to solve the context-free constraints first using familiar polynomial algorithms (Earley 1970; Kaplan 1973; Younger 1967), and then to enumerate the resulting phrase structure trees. Their corresponding functional constraints are solved by converting to disjunctive normal form (DNF) and using also well-known general purpose constraint algorithms (Nelson and Oppen 1980; Knight 1989).</Paragraph>
<Paragraph position="5"> This configuration involves a simple composition of well-understood techniques but has proven to be a computational disaster. The phrasal mechanisms compute in polynomial time a compact representation of all possible trees, each of which presents a potentially exponential problem for the constraint solver to solve. If the phrasal component is not properly restricted, there can be an infinite number of such trees and the whole system is undecidable (Kaplan and Bresnan 1982). But even with an appropriate restriction on valid phrase structures, such as LFG's prohibition against nonbranching dominance chains, the number of such trees can be exponential in the length of the sentence. Thus, even though a context-free parser can very quickly determine that those trees exist, if the grammar is exponentially ambiguous then the net effect is to produce an exponential number of potentially exponential functional constraint problems.</Paragraph>
<Paragraph position="6"> This is an important observation. There have been several successful efforts in recent years to develop solution algorithms for Boolean combinations of functional constraints that are polynomial for certain special, perhaps typical, cases (Kasper 1987; Maxwell and Kaplan 1989; D6rre and Eisele 1990; Nakano 1991). But even if the functional constraints could always be solved in polynomial time (for instance, if there were no disjunctions), the simple composition of phrasal constraints and functional constraints would still in the worst case be exponential in sentence length. This exponential does not come from either of the components independently; rather, it lies in the interface between them.</Paragraph>
<Paragraph position="7"> Of course, simple composition is not the only strategy for solving hybrid constraint systems. A typical approach involves interleaving phrasal and functional processing.</Paragraph>
<Paragraph position="8"> The functional constraints associated with each constituent are incrementally solved  John T. Maxwell and Ronald M. Kaplan Phrasal and Functional Constraints as the constituent is being constructed, and the constituent is discarded if those constraints prove to be unsatisfiable. Although this interface strategy avoids the blatant excesses of simple composition, we show below that in the worst case it is also exponential in sentence length. However, it is too early to conclude that there is no subexponential interface strategy, since the computational properties of this interface have not yet been extensively investigated. This paper maps out a space of interface possibilities, describes alternative strategies that can provide exponential improvements in certain common situations, and suggests a number of areas for further exploration.</Paragraph>
</Section>
</Paper>

