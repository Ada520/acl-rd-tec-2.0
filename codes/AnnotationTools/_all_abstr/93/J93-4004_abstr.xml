<?xml version="1.0" standalone="yes"?>

<Paper uid="J93-4004">
<Title>Planning Text for Advisory Dialogues: Capturing Intentional and Rhetorical Information</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> Explanation systems must produce multisentential texts, including justifications of their actions, descriptions of their problem-solving strategies, and definitions of the terms they use. Previous research in natural language generation has shown that schemata of rhetorical predicates (McKeown 1985; McCoy 1989; Paris 1988) or rhetorical relations (Hovy 1991) can be used to capture the structure of coherent multisentential texts. Schemata are scriptlike entities that encode standard patterns of discourse structure. Associating a schema with a communicative goal allows a system to generate a text that achieves the goal. However, we have found that schemata are insufficient as a discourse model for advisory dialogues. Although they encode standard patterns of discourse structure, schemata do not include a representation of the intended effects of the components of a schema, nor how these intentions are related to one another or to the rhetorical structure of the text. While this may not present a problem for systems that generate one-shot explanations, it is a serious limitation in a system intended to participate in a dialogue where users can, and frequently do, ask follow-up questions.</Paragraph>
<Paragraph position="1"> In this paper, we argue that to participate in explanation dialogues successfully, a generation system must represent and reason about the intended effect of individual parts of the text on the hearer, as well as how the parts relate to one another rhetorically.</Paragraph>
<Paragraph position="2"> We present a text planner that constructs explanations based on the intentions of the speaker at each step and that notes the rhetorical relation that holds between each pair of text spans. By recording the planning process behind the system's utterances as well as the user's utterances in a dialogue history, our system is able to reason about its  (c) 1994 Association for Computational Linguistics  Computational Linguistics Volume 19, Number 4 previous utterances both to interpret and to answer users' follow-up questions. We describe the plan language employed and the plan structure built by our system and provide an example of how this structure is used in responding appropriately to a follow-up question. Additional examples appear in Moore and Swartout (1989) and Moore (in press).</Paragraph>
<Paragraph position="3">  2. Motivation: A Naturally Occurring Advisory Dialogue  When we began our work on interactive explanations, we gathered samples of naturally occurring dialogues from several sources: transcripts of electronic dialogues between system users and operators collected by Robinson (1984), protocols of programmers interacting with a mock program enhancement advisor, and tape recordings of office-hour interactions between first-year computer science students and teaching assistants. A portion of a dialogue extracted from the office-hour interactions appears in Figure 1.</Paragraph>
<Paragraph position="4"> In this dialogue, a student and a teaching assistant are discussing a programming assignment that involves writing a procedure to swap the values stored at two locations in the C programming language. The student is confused about how to write the procedure because he does not understand that C is a call-by-value language, and so he must pass the addresses of the two variables to be swapped. In the teacher's response in turn 8, she explains that in C one cannot change the value of a variable defined outside of a procedure. She justifies this by saying that C is call-by-value and then goes on to define this term. The student then asks &amp;quot;What's call-by-value?&amp;quot; (turn 9). To respond appropriately to this question, the teacher must realize that she has defined call-by-value in abstract terms as part of her previous explanation and that her first attempt was not fully understood. In this dialogue, the instructor recovers from this failure by giving a very specific example of how call-by-value works (turn 10). The teacher explains call-by-value differently the second time because she realizes that she has tried to explain this once before, and that the strategy she used the first time was not sufficient.</Paragraph>
<Paragraph position="5"> Note that giving a very general description of a concept is a good first strategy. General definitions are an efficient way to convey knowledge because if the hearer understands a general definition, it covers a wide range of cases. Giving example(s) first would be a bad approach because this strategy requires the hearer to form the correct generalization from the example(s). Unless the examples are numerous enough and well chosen, this may be difficult to achieve (Klausmeier 1976). However, when a general description is not understood by itself, examples provide effective elaboration and may help the hearer assimilate the general description (Charney, Reder, and Wells 1988). In the sample dialogue, because the teacher knows that she has already given a general description in turn 8, she can give a very specific example in turn 10.</Paragraph>
<Paragraph position="6"> Another characteristic of advisory dialogues is exemplified in this sample. Adviceseekers often ask questions such as &amp;quot;Why?&amp;quot; and &amp;quot;How come?&amp;quot;. To interpret such questions, the system must have a representation of what it has said just prior to the query, so that it can determine what the user could be asking about.</Paragraph>
</Section>
</Paper>

