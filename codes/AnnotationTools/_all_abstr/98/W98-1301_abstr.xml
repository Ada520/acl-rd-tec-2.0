<?xml version="1.0" standalone="yes"?>

<Paper uid="W98-1301">
<Title>The Proper Treatment of Optimality in Computational Phonology</Title>
<Section position="2" start_page="0" end_page="3" type="abstr">
<SectionTitle>
1 Introduction
</SectionTitle>
<Paragraph position="0"> It has been recognized for some time that Optimality Theory (OT), introduced by Prince and Smolensky \[24\], is from a computational point of view closely related to classical phonological rewrite systems (Chomsky and Halle \[11) and to two-level descriptions (Kosksnniemi \[21\]).</Paragraph>
<Paragraph position="1"> Ellison \[61 observes that the ~EN function of OT can be regarded as a regular relation and that OT constraints seem to be regular. Thus each constraint can be modeled as a transducer that maps a string to a sequence of marks indicating the presence or absence of a violation. The most optimal solution can then be found by sorting and comparing the marks. Frank and Satta \[7\] give a formal proof that OT models can be construed as regtdar relations provided that the number of violations is bounded. Eisner \[3, 4, 5\] develops a typology of OT constraints that corresponds to two types of rules in two-level descriptions: restrictions and prohibitions.</Paragraph>
<Paragraph position="2"> The practice of marking and counting constraint violations is closely related to the tableau method introduced in Prince and Smolensky for selecting the most optimal output candidate. Much of the current work in optimality theory consists of constructing tableaux that demonstrate the need for particular constraints and rankings that allow the favored candidate to emerge with the best score.</Paragraph>
<Paragraph position="3"> From a computational viewpoint, this evaluation method is suboptimal. Although the work of ~EN and the assignment of violation marks can be carried out by finite-state transducers, the sorting and counting of the marks envisioned by Ellison and subsequent work (Walther \[26\]) is an off-line activity that is not a finite-state process. This kind of optimality computation cannot be straightforwardly integrated with other types of linguistic processing (morphological analysis, text-to-speech generation etc.) that are commonly performed by means of finite-state transduction.</Paragraph>
<Paragraph position="4"> This paper demonstrates that the computation of the most optimal surface realizations of any input string can be carried out entirely within a finite-state calculus, subject to the limitation (Frank and Satta \[7\]) that the maximal number of violations that need to be considered is bounded, we will show that optimality constraints can be treated computationally in a similar m~-ner to two-level constraints and rewrite rules. For example, optimality constraints can be merged with one another, respecting their rAniclug, just as it is possible to merge rewrite rules and two-level constraints. A system of optimality constraints can be imposed on a finite-state lexicon creating a transducer that maps each member of a possibly infinite set of lexicai forms into its most optimal surface realization, and vice versa.</Paragraph>
<Paragraph position="5"> For the sake of conciseness, we limit the discussion to optimality theory as originally presented in Prince and Smolensky \[24\]. The techniques described below can also be applied to the correspondence version of the theory (McCarthy and Prince \[22\]) that expands the model to encompass output/output constraints between reduplicant and base forms.</Paragraph>
<Paragraph position="6"> To set the stage for discussing the application and merging of optimality constraints it is useful to look first at the corresponding operations in the context of rewrite rules and two-level constraints. Thus we can see both the similarities and the differences among the three approaches.</Paragraph>
<Paragraph position="7"> 2 Background: rewrite rules and two-level constraints As is well-known, phonological rewrite rules and two-level constraints can be implemented as finite-state transducers (Johnson \[9\], Karttunen, Koskenniemi and Kaplan \[14\], Kaplan and Kay \[10\]).</Paragraph>
<Paragraph position="8"> The application of a system of rewrite rules to an input string can be modeled as a cascade of transductions, that is, a sequence of compositions that yields a relation mapping the input string to one or more surface realizations. The application of a set of two-level constraints is a combination of intersection and composition (Karttunen \[18\]).</Paragraph>
<Paragraph position="9"> To illustrate the idea of rule application as composition, let us take a concrete example, the well-known vowel alternations in Yokuts (Kisseberth \[20\], Cole and Kisseberth \[2\], McCarthy \[23\]). Yokuts vowels are subject to three types of alternations:  - Underspecified sui~ voweis are rounded in the presence of a stem vowel of the same height: dub+bin ~ dubhun, bok'+Al ~ bok'oL - Long high vowels are lowered: fu:t+It -~ fo:tut, mi:k+lt -4 me:t~it.</Paragraph>
<Paragraph position="10"> - Vowels are shortened in closed syllables: sa:p --+ sap, go:b/hln -~ gobhin.</Paragraph>
<Paragraph position="11">  Because of examples such as fu:t/hln -~ .~othun, the rules must be applied in the given order. Rounding must precede lowering because the suir~ vowel in ?u:t+hln emerges as u. Shortening must follow lowering because the stem vowel in fu:t+hln would otherwise remain high giving futhun rather than fothun as the final output.</Paragraph>
<Paragraph position="12"> These three rewrite rules can be formalized straightforwardly as regular replace expressions (Karttunen \[19\]) and compiled into finite-state transducers. The derivation 7u:t/hln fothun can thus be modeled as a cascade of three compositions that yield a transducer that relates the input directly to the final output.</Paragraph>
<Paragraph position="13"> The first step, the composition of the initial network (an identity transducer on the string fu:t/hln) with the rounding transducer, produces the network that maps between ?a:t+hln and fu:t/hun. The symbol, o. in Figure 1 denotes the composition operation. It is important to realize that the result of each rule application in Figure 1 is not an output string but a relation. The first application produces a mapping from ?u:t+hln to ?u:t+hun. In essence, it is the original Rounding transducer restricted to the specific input. The resulting network represents a relation between two languages (= sets of strings). In this case both languages contain just one string; but if the Rounding rule were optional, the output language would contain two strings: one with, the other without rounding.</Paragraph>
<Paragraph position="14">  At the next'step in Figure 1, the intermediate output created by the Rounding transducer is eliminated as a result of the composition with the Lowering transducer. The final stage is a transducer that maps directly between the input string and its surface realization without any intermediate stages.</Paragraph>
<Paragraph position="15"> We could achieve this same result in a different way: by first composing the three rules to produce a transducer that maps any underlying form directly to its Yokuts surface realization (Figure 2) and then applying the resulting single transducer to the particular input.</Paragraph>
<Paragraph position="17"> The small network (21 states) pictured in Figure 2 merges the three rules and thus represents the complexity of Y=okuts vowel alternations without any &amp;quot;serialism', that is, without any intermediate representations.</Paragraph>
<Paragraph position="18"> In the context of the two-level model, the Yokuts vowel alternations can be described quite simply. The two-level version of the rounding rule controls rounding by the lexical context. It ignores the surface realization of the trigger, the underlyingly high stem vowel. The joint effect of the lowering and shortening constraints is that a lexical u: in .~u:t-l-hIn is realized as o. Thus a two-level description of the Yokuts alternations consists of three rule transducers operating in parallel (Figure 3).</Paragraph>
<Paragraph position="20"> The application of a two-level system to an input can be formaiized as intersecting composition (Karttunen \[18\]). It involves constructing a partial intersection of the constraint networks and composing it with the input. We can of course carry out the intersection of the rules independently of any particular input. This merging operation results in the very same 21-state transducer as the composition of the corresponding rewrite rules pictured in Figure 2.</Paragraph>
<Paragraph position="21"> Thus the two descriptions of Yolmts sketched above are completely equivalent in that they yield the same mapping between underlying and surface forms. They decompose the same complex vowel alternation relation in different ways into a set of simpler relations that are easily understood and manipulated, r As we will see shortly, optimality theory can be characterized as yet another way of achieving this kind of decomposition.</Paragraph>
<Paragraph position="22"> The fundamental computational operation for rewrite rules is composition, as it is involved both in the application of rules to strings and in merging the rules themselves.</Paragraph>
<Paragraph position="23"> For two-level rules, the corresponding operations are intersecting composition and intersection. null Turning now to optimality theory, our main interest will be in finding what the corresponding computations are in this new paradigm. Wh. at does applying a constraint mean in the context of optimality theory? Can optimality constraints be merged while taking into account their ranking?</Paragraph>
<Paragraph position="25"></Paragraph>
</Section>
</Paper>

