<?xml version="1.0" standalone="yes"?>

<Paper uid="J84-2001">
<Title>A Phrase-Structured Grammatical Framework for Transportable Natural Language Processing I</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> As a result of advances in natural language processing, programs that provide practical English-language capabilities have begun to rival more conventional means of computer interactions for certain purposes, including data-base retrieval, online help facilities, and limited forms of office assistance. Although several prototype systems have provided customization facilities that allow users to specify synonyms, syntactic paraphrases, and the like, traditional approaches have resulted in systems wedded to a single domain of data. That is, users are unable to access novel types of data without acquiring ~ new or modified processor specifically tailored to the new domain by the system designer(s). Not surprisingly, an important trend in natural language system design is in allowing users themselves to adapt an existing processor for a new domain.</Paragraph>
<Paragraph position="1"> Accordingly, prototype systems that permit user customizations or rapid customizations by a designer have included REL, POL and ASK (Thompson and Thompson 1975, 1981, 1983), CONSUL (Mark 1981; Wilczynski 1981), IRUS (Bates and Bobrow 1983), KLAUS (Haas and Hendrix 1980), TEAM (Hendrix and Lewis 1981; Grosz 1983), a system developed at Bell Labs (Ginsparg 1983), and our own LDC system (Ballard 1982, 1984; Ballard and 1 This research was supported in part by the National Science Foundation under Grant Numbers MCS-81-16607 and IST-83-01994 and in part by the Air Force Office of Scientific Research under Grant Number 81-0221.</Paragraph>
<Paragraph position="2"> Copyright 1984 by t~'z Association for Computational Linguistics. Permission to copy without fee all or part of this material is granted provided that the copies are not madc for direct commercial advantage and the CL reference and this copyright notice are included on the first page. To copy otherwise, or to republish, requires a fee and/or spccific permission.</Paragraph>
<Paragraph position="3"> 0362-613X/84/020081-16503.00 Computational Linguistics Volume 10, Number 2, April-June 1984 81 Bruce W. Ballard and Nancy L. Tinkham A Phrase-Structured Grammatical Framework for Transportable NLP Lusth 1983, 1984; Ballard, Lusth and Tinkham 1984a, 1984b). Since the successful construction of a transportable system requires sound methods of representing what is to be learned, the design of formalisms to be used in transportable natural language processors relates to the scientific, as well as the engineering, aspects of computational linguistics.</Paragraph>
<Paragraph position="4"> In this paper we present methods of dealing with the syntactic problems that have arisen in the construction of our LDC system. In particular, we shall describe a grammatical formalism, based on augmented phrase-structure rules, which allows a parser to make domain-specific decisions by referring to a dictionary and other auxiliary files produced during an initial learning session with the user.</Paragraph>
<Paragraph position="5"> We illustrate the workings of our grammatical formalism with examples from the existing LDC grammar, but we note that similarly motivated systems ought also to benefit from our formalisms. We will also include the results of some experiments with our existing grammar as applied to several domains.</Paragraph>
<Paragraph position="6"> In addition to showing the theoretical advantage of being able to provide many of the fine-tuning capabilities of so-called semantic grammars within the context of a domain-independent grammar, we demonstrate several practical benefits to our approach. For example, the conciseness of our formalism allows shorter grammars than many previous formalisms would allow, at least for the intended class of retrieval applications. This offers not only added perspicuity but other benefits as well. For instance, we have been able to write simple (almost trivial) LISP routines that pre-process a grammar to construct the files used by the parser to increase efficiency and to perform valuable disambiguations.</Paragraph>
</Section>
</Paper>

