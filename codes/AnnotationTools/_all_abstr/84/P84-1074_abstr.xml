<?xml version="1.0" standalone="yes"?>

<Paper uid="P84-1074">
<Title>LFG ~ystsm in Prolog</Title>
<Section position="1" start_page="0" end_page="358" type="abstr">
<SectionTitle>
ABSTRACT
</SectionTitle>
<Paragraph position="0"> In order to design and maintain a latE? scale grammar, the formal system for representing syntactic knowledEe should be provided. Lexlcal Functional Grammar (LFG) \[Kaplan, Bresnan 82\] is a powerful formalism for that purpose, In this paper, the Prolog implementation of LFG system is described. Prolog provides a Eood tools for the implementation of LFG. LFG can be translated into DCG \[Perelra,IIarren 80\] and functional structures (f-structures) are generated durlnK the parsing process.</Paragraph>
<Paragraph position="1"> I INTRODUCTIOr~ The fundamental purposes of syntactic analysis are to check the Eramnatlcallty and to clariDI the mapping between semantic structures and syntactic constituents. DCG provides tools for fulfillln 6 these purposes. But, due to the fact that the arbitrary 9rolog programs can be embedded into DCG rules, the grammar becomes too complicated to understand, debug and maintain.</Paragraph>
<Paragraph position="2"> So, the develo~ent of the formal system to represent syntactic knowled~es is needed. The main concern is to define the appropriate set of the descriptive primitives used to represent the syntactic knowledges. LFG seems to be promising formalism from current llngulstlc theories which satisfies these requirements. LFG is adopted for our prelimlna~y version of the formal system and the Prolog implementation of LFG is described in this paper.</Paragraph>
<Paragraph position="3"> ii SII:~.Z OVERVI~ OF LFG in this section, the simple overview of LF~ is described (See \[Eaplan, Bresnan 82\] for details ). LFG is an e::tention of context free grammar (C~'G) and has two-levels of representation, i.e. c-structures (constituent structures) and f-~tructures (functional structures). A c-structure is generated by CFG and represents the surface uord and phrase configurations in a ~entence, and the f-structure is generated by the functional equations a=sociated with the o~rammar rules and represents the conflo~uratlon of the surface ~ra=matical functions. Fi~. I shows the c-structure and f-structure for the sentence &amp;quot;a e~f.rl handed the baby a toy&amp;quot; (\[Kaplan,Bresnan 82\]).  As shown in Fig. I, f-structure is a hierarchical structure constructed by the pairs of at~rlbute and its value. An attribute represents ~ra=matlcal function or syntactic feature.</Paragraph>
<Paragraph position="4"> Lexlcal entries specify a direct mappinE betueen semantic arguments and confizuratlons of surface grammatlcal functions, and ~rammar rules specify a direct mapping between these surface Cr~umatlcal functions and particular constituent structure conflguratlons. To represent these Cra=matlcal relations, several devices and schemata are provided in LFG as shown below.</Paragraph>
<Paragraph position="5">  (d) Constrainln~ schema {i) =c (equational constraint) (ii) d (existential constraint)  where d is a desIcnator (ill) negation of (1) and (il) Fi~. 2 sh~#s the e~anple ~ra~uar rules and le&amp;quot;~ical entries in LF~, wl~ch senerate the c-structure and the f-structure in Fig. 1.</Paragraph>
<Paragraph position="6">  As sh~n in Fi~. ~, the prlnltlves to re~resent ~r3~.atlcal relations are encoded in ~ra~:aar rules and le~cal entries. Each syntaotle node h~s i~s own f-structure and the partial value of the f-structure is defined by the Equational ~ch~m. For exauple, the functional equation &amp;quot;(~ sub~)=$&amp;quot; associated with the dau~hter &amp;quot;np&amp;quot; node of ~r~-u~r rule I. of Fi~. 2 specifies that the value of the &amp;quot;sub~&amp;quot; attribute of the f-structure of th~ ~other &amp;quot;s&amp;quot; node is the f-structure o/ its d~u~ter &amp;quot;np&amp;quot; node. ~ne value constraints on the f-~tructure are specified by the Constraln~r~ schema, i:oreover, the o~rauatlcallty of the sentence is defined by the three conditions shown bel~.</Paragraph>
<Paragraph position="7">  (I) ~nlqueness: a particular attribute may have at :cost one value in a ~iven f-structure.</Paragraph>
<Paragraph position="8"> (2) Completeness: a f-structure must contain all the ~overnable ~r~uatical functions ~overned by It~ predicate.</Paragraph>
<Paragraph position="9"> (~) Coherence: all the ~overr~ble ~ran~uatlcal functions that a f-structure contain must be ~overned by its predicates.</Paragraph>
</Section>
</Paper>

