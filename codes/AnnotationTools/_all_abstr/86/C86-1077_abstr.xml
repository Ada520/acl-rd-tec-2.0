<?xml version="1.0" standalone="yes"?>

<Paper uid="C86-1077">
<Title>Strategies for Interactive Machine Translation: the experience and implications of the UMIST Japanese project *</Title>
<Section position="2" start_page="0" end_page="332" type="abstr">
<SectionTitle>
1, Introduction
</SectionTitle>
<Paragraph position="0"> At the Centre for Computational Linguistics, we are designing and implementing an English-to-Japanese interactive machine translation system. Tile project is funded jointly by the Alvey Directorate and International Computers Limited (ICL). 'Pile prototype system runs on the ICL PERQ, though much of the development work has been done on a VAX \]\]./750. It is implemented in Prolog, in the interests of rapid protohyping, but intended for optimization. The informing principles are those of modern complex-feature-based linguistic theories, in particular Lexical--Functional Grammar (Bresnan (ed.) 1982, Kaplan and Bresnan 1982), and Genera\]ized Phrase Structure Grammar (Gazdar et al. 1985).</Paragraph>
<Paragraph position="1"> For developntent purposes we are using an existing corpus of 10,000 words of continuous prose from tile PERQ's graphics documentation; in the long term, the system will be extended for use by technical writers in fields other than software. At the time of writing, we have well-developed system development software, user interface, and grammar and dictionary handling utilities. Tile English analysis grammar hand\]es most of the syntactic structures of the corpus, and we have a range of formats for output of linguistic representations and Japanese text. A transfer g:camnlar for English-Japanese has been prototyped, but is not *lot yet fully adequate to handle all constructions in the corpus; a facility for dictionary entry in kanJi is incorporated. The aspect of the system we will focus on in the present paper is its interactive nature, di,qcussing the range of different types of interaction which a're provided or permitted for different types of user.</Paragraph>
<Paragraph position="2"> 2. %'he relationship between buman and machine The complexity of the translation task, and the dlver.~:kty of the knowledge types involved, makes the implementation of all MT system a research problem in knowledge engineering. In order for intermediate results to be of practlcal value, it is necessary to integrate human expertise into the machine translation process. After this input, the machine's knowledge must be complete, adequate for carrying out all later stages in the translation chain. Three strategies are recognized for this involvement, post-editlng, pre-edit ing, and interactive translation (see further Whitelock (ed.) 1985).</Paragraph>
<Paragraph position="3"> Of these three strategies, post-edited translation is obviously the safest; the human has the final say, and so can correct any translation e, rrors made by tile machine. However, * tile post-ed~tor must be expert in the source language (at least for the text-type), target language, and subject inatter, i.e. a competent translator in his/her own right. The majority of current machine translation systems are of this type - it has proved to be cost effective - but post-editing is both revetitive and totally indispensable. Current interactive systems, too, typically require a high degree of bilingual competence on the humen's part.</Paragraph>
<Paragraph position="4"> The pre-editing option assumes input which has been either drafted or edited to use only a restricted sub&lt;language. Despite its demonstrated utility (e.g. Meteo (Chevalier et al. 1978), Xerox Systran (Ruffino 1982)), it is often viewed as a poor alternative, conveying connotations of severe restrictions on input. We believe that the notion of pre-editing should be reexamined in the light of Kay's remark that machine translation :is in principle possible only between formal languages (fn 1). Any MT system will produce intelligible output from only a proper subset of texts in what is claimed * to be the source language. Translation of a natural language in its entirety is an illusory goal. If the particular subset which can be automatically translated is not formalised independentl V of its instantiation as a computer system, the entire output must be checked after translation, in conjunction with the source text. We believe that it is preferable to define explicitly the subset of the source language tbat the machine can translate. Moreover, we believe that the drafting of texts in such a restricted language is an ideal candidate for automation.</Paragraph>
<Paragraph position="5"> We have therefore designed a system to effect monolingual interactive pre-editing for pre-edited translation, questioning the human user about the source text, not about its translation (cf. Johnson &amp; Whitelock 1985). An interactive system of this type should be able to accept an adequate subset of grammatically well-formed input, querying the user to resolve ambiguities or indeterminacies unti 1 a representation is reached which is sufficiently detailed and precise to guarantee acceptable translation to a given language (fn 2). A i, onolingual writer can thus produce finished target language text wihout further human intervention. As an incidental benefit, s/he can be expected to learn from experience which sentence patterns will not be accepted and which will give many ambiguities, and avoid them.</Paragraph>
<Paragraph position="6"> Indeed it could be argued that such a system is valuable even monolingually, as an 'intelligent' style checker, with translation capability as an incidental benefit.</Paragraph>
<Paragraph position="7">  Thus we do not concur with Slocum's (\].985) assessment of the potential of interaction.</Paragraph>
<Paragraph position="8"> Slocum characterizes interactive machine translation as &amp;quot;Human Assisted Machine Translation&amp;quot; as distinct from 'full' MT, on the grounds that the exploitation of the bilingual expertise of a human is interleaved with that of the machine. It appears that the machine is not carrying out the task of translation automatically.</Paragraph>
<Paragraph position="9"> However, it seems more appropriate to consider the complete chain of processes from source language text composition to target language text completion. From this perspective, any type of machine translation is human assisted. It is important to assess the quantity and character of huma~ intervention as well as its position in the system. A post-edlted system resigns itself from the start to inadequacy, building in the requirement for (more or less) radical human revision of its output, so that it might better be called pro-translation than translation proper; while many current proediting systems, although offering fully automatic production of target language text from source language text, require a human contribution in the pre-input stage, controlling and restricting that source text, which qualitatively far exceeds the demands of on-line interaction (fn 3).</Paragraph>
<Paragraph position="10"> Moreover, the future of machine translation, and natural language processing in general, seems certain to lie with systems based on A* techniques such as the use of inference for ambiguity resolution. A primary consideration will be to facilitate the transfer of expertise from human to machine, by means of modular programming, knowledge engineering techniques, and, ultimately, machine learning.</Paragraph>
<Paragraph position="11"> Interactive system design may well be the type most readily extended to incorporate such techniques as they are developed; the forms of interaction implemented for the present human user can be progressively delegated to a virtual or machine &amp;quot;user&amp;quot;. Thus despite the admitted limitations of interactive translation per se, systems including some sort of interaction offer bQth the most efficient use of current resources and the most convincing basis and model for research aimed at greatly improving translation quality.</Paragraph>
<Paragraph position="12"> 3. System development tools With the aim of producing a tool for continuing research as well as a system of practical utility, we have conceived our translation system itself and the system development tools as an integrated entity.</Paragraph>
<Paragraph position="13"> Recognising a variety of types of 'user', from end-user to system designer, our development system is organized as a tree of facilities, where different types of user are allowed or  offered access at different levels. Facilities supported include: i) using the system for writing, editing and translating, 2) writing the grammars, 3) developing the grammatical theory and the translation chain, 4) designing the system itself.</Paragraph>
<Paragraph position="14">  All tasks are carried out by traversing the tree under the guidance of menus. The menu system is designed to allow non-programmers (fn 4) to specify both the conversion of linguistic data to menus, and the interpretation of menu choices. This provides the organisation necessary to control : a) different views of the data by different users, and  b) different processing/compilation of data according to its type.</Paragraph>
<Paragraph position="15"> Corresponding to the four types of task given above, we recognise four (idealised) types of user:  They have access rights as follows: i) The end user will be a monolingual (English) technical writer, with expert knowledge of the technical field and its terminology, but no knowledge of the target language. (For development purposes we are working with extant texts chose*\] to be typical of their kind; but the intention is to provide the writer with a tool for the initial composition of such texts. The end user will thus be able to respond .lore flexibly to the system, and make better use of its facilities, than we can ourselves do at the moment; although we intend it to produce its own documentation.) The facilities available to the end user will include: a) standard monolingual text/document processing facilities, b) on-line monolingual dictionary update, into &amp;quot;supplementary&amp;quot; dictionary files for later bilingual completion and full incorporation by some lower-level user, c) tree-structured document organisation, with an associated dictionary structure, that handles terminology, including proper (e.g. procedure) names, at different levels of generality. This is important from both monolingual and bilingual perspectives.</Paragraph>
<Paragraph position="16"> Monolingually, it provides a basis for indexing, document retrieval, glossary production, spelling checks etc. Bilingually, in terms of translation into Japanese, these distinctions map well onto orthographic conventions: general vocabulary is represented in kanji (ideographic) script, Japanese technical vocabulary from foreign languages in kana (Japanese syllabic) script, and proper nouns such as procedure names are simply carried over in Roman (alphabetic) script.</Paragraph>
<Paragraph position="17"> 2) The second level of user, the high-level linguist, is responsible for writing the rules which compute well-formed sets of feature specifications (e.g. F-structures) from other sets, for source language analysis, transfer, and target language synthesis. A variety of ruIe types could be provided for these purposes. The system as implemented supports the following: a) dictionary entries, which specify idiosyncratic information of all kinds. These define a mapping between lexemes and (underdeterminsd) sets of feature specifications, for analysis, and between pairs of sets of feature specifications, for transfer. b) Context-free rules, augmented in the manner of LFG or PATR II (Shieber 1984), that is, regular expressions over strings of sets of feature specifications (i.e. lexical entries) that define a mapping to hierarchical (dependency) representations.</Paragraph>
<Paragraph position="18"> e) recursively structured sets of features, permitting grouping of features along various dimensions, e.g. noun/verb, syntactic/semantic, lexical/phrasal, etc.</Paragraph>
<Paragraph position="19"> d) feature co-occurrence restrictions (FCRs) in the manner of GPSG. These can be used to define sets of features as mutually exclusive, and to specify that certain feature values necessarily follow from the presence or values of other features.</Paragraph>
<Paragraph position="20"> e) default .values of lexical feature specifications.</Paragraph>
<Paragraph position="21"> f) rules which determine (surface) relational labels ,on the basis of feature values. By recognising these as a distinct rule type, we make a substantive claim equivalent to the formal claim embodied in the typical LFG analysis of prepositional phrases - that the value of a prepositional feature becomes the relation of the (F-structure of the) PP to (that of) its head.</Paragraph>
<Paragraph position="22"> g) subcat rules, which relate subcategorisatlon features from the lexicon to function-argument (deep to surface) mappings. Such features may be specified in a lexical entry itself, or filled in by FCR. Function-argument mappings are merely pairs of atoms, that is, each constituent is mapped independently of its sisters. This allows us to define effioient control strategies over these rules for use in either direction - analysis or synthesis. The control strategy, in combination with the uniqueness condition on f-structures, embodies the function-argument biuniqueness principle of Bresnan (1982,p163), and realises the coherence condition. Completeness is specified independently, or, in the case of Japanese, not at all.</Paragraph>
<Paragraph position="23"> The task of the hlgh-level linguist is to define particular instances of rules of these types, for the purpose of describing texts in a particular language and &amp;quot;the relationship between texts in a particular pair of languages. 3) The low-level lingu:\[st (the grammar designer) is responsible for defining the formalism, or metatheory, in which the high-level linguist will work (cf. Shisber 1985). This includes: a) defining the nature and number of levels of text representation during the translation process* This includes deciding between phrase structure and dependency represe*rtatlons, the partition between the lexical and syntactic colaponents in analysis, and the partition between analysis and transfer. b) defining the rule types to reflect these partitions and specify the mappings between levels.</Paragraph>
<Paragraph position="24"> c) definition of the declarative semantics of the operators by which the rules of various types are applied, and thence the definition of the compilation of linguistic information.</Paragraph>
<Paragraph position="25"> 4) The system designer is concerned with both the highest and lowest levels of the system: on the one hand, with the most general overall considerations of system architecture, including the points and types of interaction; on the other, with ensuring that the metalinguistic decisions made by tbe grammar designer have a tractable computational realisation (procedural semantics) and can be integrated with interaction.</Paragraph>
<Paragraph position="26"> For each level of user, there is a different, appropriate correspondence of privilege and responsibility; each should be able to use his/her specialist competence (monolingual technical writing, the writing of grammars, the design of grammatical theory, and the desigh of knowledge-based systems) with the full benefit of al I facilities defined at lower levels, without c'oncern for the particular details of either lower-level implementation or higher- level application.</Paragraph>
<Paragraph position="27"> Further corresponding to these four classes of user, the CCL Japanese system incorporates interactive routines of variable 'userfriendliness' appropriate to the presumed competence of a user at that level.</Paragraph>
<Paragraph position="28"> The linguist, for example, can enter the grammar to revise or expand it. The menu of the &amp;quot;Grammar Development System&amp;quot; at which the high level linguist is rooted provides the option Edit a file of linguistic data.</Paragraph>
<Paragraph position="29"> This takes one to n nested menu which provides the alternatives:  I. lexicon 2. grammar 3. feature system Selecting &amp;quot;2&amp;quot; takes one to a further menu controlling the editing of the augmented phrase structure rules, from which one can choose the appropriate rule, e.g.</Paragraph>
<Paragraph position="30"> i. sentence 2. nounphrase 3. verb phrase  M\[ remove nonterminal category N. add new nonterminal category Control ling access to linguistic information by means of menu ensures that the updated files are appropriately recompiled into the form used by the program. For instance, when the grammar writer updates the definition of feature sets and/or FCI~s, a compilation process is initiated. This expands the tree structure into an extensional definition of the procedure which adds a feature specification to an fstructure. This realises f-structure (graph) unification as Prolog (term) unification, greatly enhancing the efficiency of parsing.</Paragraph>
<Paragraph position="31"> An example of variable interaction strategies :\[or different types of user is provided by the dictionary creation and update procedures. The dictionary can be modified either en bloc for systematic large-scale creation or expansion, typically by the high-level linguist; or on-line, during analysis, by an end-user.</Paragraph>
<Paragraph position="32"> The linguist will enter dictionary creation by taking first the top level menu option &amp;quot;edit a file of linguistic data&amp;quot;, then the option &amp;quot;lexicon&amp;quot;. The end use\]::, when s/he enters a word for which there is no existing dictionary entry, is offered the menu options &amp;quot;proper noun&amp;quot;, &amp;quot;misspelling&amp;quot;, &amp;quot;enter dictionary creation&amp;quot;. The dictionary creation process is driven by the tree-structured menu system, rooted in the choice of grammatical category&amp;quot; and here again different procedures are available for different predicted levels of use. It is presumed that closed class words such as determiners, quantifiers, and conjunctions will only be added by the linguist; therefore, when such classes are selected, tile user sees lexical entries exactly as interpreted during translation.</Paragraph>
<Paragraph position="33"> For open class words, on the other hand, where update by the end-user is the norm, interactive routines are provided. In these cases the user never sees the program form.</Paragraph>
<Paragraph position="34"> Questions are asked enabling the system to determine the appropriate inflectional paradigm: syntactic category, mass (i.e. without a plural form) or count, etc. Plausible surface forms are then generated by a morphological component, and presented to the user for confirmation or correction. The same component is used during morphological analysis. Thus if the user confirms the machine-generated form, the machine will be able to analyse that form when it appears in a text, and need not store it.</Paragraph>
<Paragraph position="35">  The syntactic and semantic feature specifications for new dictionary entries are also built up interactively. Where reasonable defaults can be established, these are presented to the user for confirmation or override. Verbs, for example, are assumed to be transitive unless the user exercises the option to specify some other valency pattern; nouns are assumed to be countable. Where a value is less predictable, the user is simply asked to provide it: does a given noun denote a physical object, a software object, or an abstraction? Verbs are described within a modified Vendler/Dowty-type classification (Vendler 1967, Dowry 1979, Steedman &amp;Moens 1986); the user is asked to specify the appropriate value from a set including state, activity, achievement, and accomplishment.</Paragraph>
<Paragraph position="36"> The menu interpreter creates and stores from this input a dictionary entry in a neutral format. Subsequently, this is compiled to a program form entry. The new entries thus created are not added immediately to the master files, but are held in supplementary files, where they are available to the system, but also clearly isolated for the high-level linguist, who will eventually add translation equivalents (of which the end-user is presumed to be ignorant) and incorporate the completed entries into the master dictionary(s).</Paragraph>
<Paragraph position="37"> The creation of an intermediate neutralform dictionary offers a facility for global revision of the program form of the complete dictionaries. The neutral form and program form are related by FCRs which embody generalisations about the syntactic behaviour of various Iexical features. For instance, the count/mass feature on noun entries is related to two features in the program form specifying the values for number agreement and eoocurrence with an article. The low-level linguist need only change such facts and recompile the relevant neutral form files to generate a new program-form dictionary.</Paragraph>
<Paragraph position="38"> Currently, the dictionary creation menu system must be written by hand. We are experimenting with the possibility of constructing it automatically from the feature system.</Paragraph>
<Section position="1" start_page="331" end_page="332" type="sub_section">
<SectionTitle>
4o Interactive disambiguation
</SectionTitle>
<Paragraph position="0"> The two principal considerations relevant to interactive disambiguation are at what point it should take place, and what form it should take. We will discuss these in orderdeg i) Where should disambiguation take place? One answer to the question of when to interactwith a user is : st different points according to the type of ambiguity. We believe that this is not the correct answer, but that all ambiguity resolution should be deferred to transfer. A distinction between types of ambiguity according to their point of origin does not help in their resolution. Nor is it possible to draw a sharp dividing line between 'spurious' and 'real' ambiguities. Rather, we derive a characterisation of ambiguity types from the types of knowledge needed to resolve them.</Paragraph>
<Paragraph position="1"> Ambiguities resolvable by syntactic knowledge, such as the ambiguities in major syntactic category so common in English, seem to present little problem. MT systems whose output is intended for post-editlng often include a 'homograph resolution' phase devoted to this type of ambiguity resolution. Though largely successful, such an approach is obviated by the  use of the simplest phrase structure grammars. Conversely, explicit homograph resolution seems unavoidable when the system must not, under any circumstances, reject input as ill-formed and untranslatable. (fn 5) Ambiguities resolvable by consideration of the sub-categorisation/valency/case patterns of lexical items include both lexical and attachment ambiguities, but not all cases of either. For instance: &amp;quot;... provides the interface to the system&amp;quot; appears to require domain specific knowledge; and &amp;quot;...is achieved by calling theprocedure X&amp;quot; requires fairly sophisticated knowledge concerning the relative likelihood of achieving s state by giving an entity a particular name or giving it control.</Paragraph>
<Paragraph position="2"> The question of how an ambiguity is resolved is thus almost independent of how it arises. Even word-class ambiguities occasionally persist through a syntactic analysis and require knowledge of the discourse for resolution, e.g. &amp;quot;loading instructions will start processing&amp;quot; A view of organising resolution so that each stage of processing resolves the ambiguities introduced by the previous stage is thus naive.</Paragraph>
<Paragraph position="3"> In terms of interaction, questioning the user too early in the translation chain will be unacceptable. The user must appear to the disambiguator as just another knowledge source, the last to be exploited.</Paragraph>
<Paragraph position="4"> If ambiguities are to remain unresolved through several stages of processing, compact representations of multiple readings of texts seem essential. The chart (Kay, 1973, Martin et al., 1981), and similar devices such as Tomita's (1985) 'shared packed forest' are important contributions to the solution of this problem. The approach to ambiguity typical in linguistic theory is to allow the grammar to induce it, and to treat the question of its compact representation as a matter for parsing, irrelevant to declarative description. We are investigating the alternative notion that linguistic description itself should explicitly MndeKdeterm!ne representation. An approach to syntactic underdetermination is that of Marcus (1985). We have not yet examined its applicability to the current task. The 9R~\[~ semantics of Aronoff (1980, see also Miller (197--87 ~-- Wood (1985)) is a theory of underdetermination of lexical entries. Such lexical entries become more fully determined in context. One might say that they become ambiguated and resolved simultaneously. (\]in fact, depending on the use which is %o be made of the results of analysis, they may never become determined.) This approach is applicable even to ambiguities in major syntactic category. Then parsing can be considered as ambiguating them to the extent licensed by the phrase structure rules and textual context.</Paragraph>
<Paragraph position="5"> Such ideas are particularly interesting in the context of our system. The GPSG-Iike feature system is a means for describing the redundancies in the lexicon; the LFG-like notion of multi-level linguistic description (see l&lt;aplan 1985) offers the possibility of utilising such descriptions to 'expand' the lexicon in several stages. In our system, ambiguities in subcategorisation behaviour (including that between past and passive participles) do not exist during surface syntactic parsing. We think of such an item as being a single morphsyntactic entity, but a pair of 'semantic' ones. Thi's is important in translation, since the indeterminacles of the source language may or may not become ambiguities in translation. For example, the state-event ambivalence of passive participle,~\] in many languages must be recognised and resolved in transfer to Japanese (though not in going from French to English, for example). For a linguistic description of the source language not to include this ambivalence would render it incomplete; for analysis to treat it, and many similar cases, as genuine ambiguities would be problematic COlnputationally, We believe that tile invocation or application of monolingual (source) knowledge by a billngua\] component is an attractive approach to this problem. A good human trans\].ator infers from the source text what is needed for translation, and a machine system should exhibit this same, goal-driven, behaviour. In the same way that a human translator, in the event of being unable to resolve an ambiguity whose resolution is crucial, for translation, migIlt contact the original author, so the machine's knowledge must be organised to allow the same fail-safe interaction.</Paragraph>
<Paragraph position="6"> 2) What form should interaction take? We can recognise a variety of forms that interaction could take, on a scale of increasing independence from linguistic analyses, as fol lows : a) Presentation of alternatives as their linguistic representations (e.g. trees). Though unsuitable for a linguistlcally-naive end-user, this type of interaction is important during system development. While the high-level linguist is experimenting with different ways in whicIl the s~stem's knowledge can be deployed for sutomatic ambiguity resolution, s/he must be able to .inspect a detailed representation of those cases where tile current strategy and/or knowledge are inadequate. In addition, this form of presentation is a prerequisite 'to defining more user-friendly formsdeg b) String template presentations. At its simplest, for, say, attachment ambiguities, this involves presenting tile ambiguously attached string with a slot filled by the different heads. This was the appnoach adopted in Kay's (1973) MIND system, eogdeg &amp;quot;They filled the tank with gas&amp;quot; This means:  1. Filled with gas 2. Tank with gas  A more sophisticated template structure is used by Tomita (1985). This involves the use of what Hudson (1985) has termed 'natural metalanguago', e.g.</Paragraph>
<Paragraph position="7"> &amp;quot;I saw a man in 'the park&amp;quot; ideg The action \[saw\] takes place \[in the park\] 2. \[a man\] is \[in the park\] We believe that this is an important direction to explore, though it may lead to obvious absurdities, depending on the sophistication with which templates are defined and chosen, e.g.</Paragraph>
<Paragraph position="8"> &amp;quot;This module provides tile interface to tile system&amp;quot; io The action \[provides\] takes place \[to tile system\] 2. \[Tile interface\] is \[to the system\] C) Disambiguatlng paraphrase. This car* be illustrated for the same sentence as above: I. The interface to the system is provided by this module.</Paragraph>
<Paragraph position="9"> 2. This module provides the system with an interface.</Paragraph>
<Paragraph position="10"> The success of this approach depends crucially on finding the set of relational rules (in the example, passive and benefactive) that wil\] generate disambiguating paraphrases. We hope that our approach 'to subcategorisation, with independent function-argument mappings for each constituent, will make this possible, but it is too early to say.</Paragraph>
</Section>
</Section>
</Paper>

