<?xml version="1.0" standalone="yes"?>

<Paper uid="C86-1016">
<Title>D-PATR: A Development Environment for Unification-Based Grammars</Title>
<Section position="1" start_page="0" end_page="74" type="abstr">
<SectionTitle>
1 Introduction
</SectionTitle>
<Paragraph position="0"> I)-PATR is a development environment for unification-based grammars on Xerox li00 series work stations. It is based on the PATR formalism developed at SRI International. This formalism is suitable for encoding a wide variety of grammars. At one end of this range are simple phrase-structure grammars with no feature augmentations. The PATR formalism can also be used to encode grammars that are based on a number of current linguistic theories, such as lexical-functional grammar (Bresnan and Kaplan), head-driven phrase structure grammar (Pollard and Sag), and functional unification grammar (Kay). At the other end of the range covered by D-PATR are unification-based categorial grammars (Klein, Steedman, Uszkoreit, Wittenburg) in which all the syntactic information is incorporated in the lexicon and the remaining few combinatorial rules that build phrases are function application and composition.</Paragraph>
<Paragraph position="1"> Definite-clause grammars (Pereira and Warren) can also be encoded in the PATR formalism.</Paragraph>
<Paragraph position="2"> What these approaches have in common is that syntactic rules and lexieal entries can be written down as sets of attribute-value pairs. Moreover, because a value at the end of one path of attributes can be shared by another path, the structures that are generated by such grammars can be thought of as directed graphs Cdags&amp;quot;). Unification is the key operation for building these structures.</Paragraph>
<Paragraph position="3"> Because unification is associative and commutative, statements in a unification-based grammar formalism are order-independent and bidirectional with respect to parsing and generation. For a comprehensive introduction to unification-based approaches to grammar, see Shieber 1986 (forthcoming).</Paragraph>
<Paragraph position="4"> The idea that led to the present version of D-PATR was to produce a simple compact system for experimenting with unification-based grammars that would run on machines smaller than the Symbolics 3600 for which the original t'ATI~ implementation at SRI had been created.</Paragraph>
<Paragraph position="5"> The first version of I)-PATR, initially called }lUG, was written at the Scandinavian Summer Workshop for Computational Linguistics in Helsinki, Finland, at the end of August 1985. Although the actual notation for writing rules in D-PATR in some respects differs from the notation in the original PATIC/ system, essentially both systems implement the samegrammar formalism. To emphasize this point, the two implementations are now called Z-PATR (Zeta-LiSP PATR) and D PATR (Interlisp-D PATR). A number of innovations that came in with l) PATR (HUG) have since migrated to Z-PATR. A case in point is the method for minimizing copying in unification that is discussed in the section on parsing and unification. Other implementation differences remain--for example, in the parsing algorithm and in the treatment of gaps--but grammars written for D-PATR are convertible into Z-PATR format, and vice versa.</Paragraph>
<Paragraph position="6"> D-PATR consists of four basic parts:  These packages are written in simple Interlisp-D for transportability to other dialects of LISP. They do not depend on the features of any particular machine. The only part of D-PATR that is specific to Xerox 1100 series work stations is its user interface. This last set of routines takes full advantage of the graphic capabilities  of D-machines. It provides good facilities for writing and editing grammars as well as many debugging tools for the , ~rammar writer.</Paragraph>
</Section>
</Paper>

