<?xml version="1.0" standalone="yes"?>

<Paper uid="W05-1521">
<Title>The Quick Check Pre-unification Filter for Typed Grammars: Extensions</Title>
<Section position="2" start_page="0" end_page="188" type="abstr">
<SectionTitle>
1 Coreferenced Based Quick Check
</SectionTitle>
<Paragraph position="0"> Suppose that the FS ph is going to be unified with ps, and that ph contains the coreference ph.pi .= ph.piprime.</Paragraph>
<Paragraph position="1"> In this setup, if for a certain path e it happens that sort(ph.(pie)) [?] sort(ps.(pie)) [?] sort(ps.(piprimee)) = [?], then certainly ph and ps are not unifiable. There is no a priori reason why, on certain typed grammars, coreference-based sort inconsistency would not be more effective in ruling out FS unification than sort inconsistency on mutual paths. Moreover, the integration of the two forms of QC is not complicated. However, up to our knowledge no system parsing LinGO-like grammars included the above newly presented form of (coreference-based) pre-unification QC test.</Paragraph>
<Paragraph position="2"> On the GR-reduced form LinGO (Ciortuz, 2004) we identified 12 pairs of non-cross argument coreferences inside rule arguments (at LinGO's source level). Interestingly enough, all these coreferences occur inside key arguments, belonging to only 8 (out of the total of 61) rules in LinGO.</Paragraph>
<Paragraph position="3"> To perform coreference-based QC, we computed the closure of this set L of coreference paths. The closure of L will be denoted -L. If the pair pi1 and pi2 is in L, then together with it will be included in -L all pairs of QC-paths such that pi1e and pi2e, where e is a feature path (a common suffix to the two newly selected paths). For the GR-reduced form of LinGO, the closure of L defined as above amounted to 38 pairs. It is on these pairs of paths that we performed the coreference-based QC test.</Paragraph>
<Paragraph position="4"> Using all these coreference paths pairs, 70,581 unification failures (out of a total of 2,912,623 attempted unifications) were detected on the CSLI test suite. Only 364 of these failures were not detectable through classical QC. When measuring the &amp;quot;sensitivity&amp;quot; of coreferenced-based QC to individual rule arguments, we found that out of a total of 91 rule arguments in LinGO only for 4 rule arguments the coreference-based QC detects inconsistencies, and the number of these inconsistencies is far lower than those detected by the classical QC on the same arguments. None of the pairs of coreference paths exhibited a higher failure detection rate than the first ranked 32 QC-paths. If one would work with 42 QCpaths, then only 4 of the pairs of coreference paths would score failure detection frequencies that would qualify them to be taken into consideration for the (extended form of) QC-test.</Paragraph>
<Paragraph position="5"> As a conclusion, it is clear that for LinGO, running the coreference-based QC test is virtually of no use. For other grammars (or other applications involving FS unification), one may come to a different conclusion, if the use of non-cross argument coreferences balances (or outnumbers) that of cross- null argument coreferences.</Paragraph>
</Section>
</Paper>

