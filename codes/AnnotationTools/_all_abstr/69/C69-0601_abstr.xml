<?xml version="1.0" standalone="yes"?>

<Paper uid="C69-0601">
<Title>Preprtnt No. 6 Classification: TG 2.1 Some formal properties of phonological redundancy rules.</Title>
<Section position="2" start_page="0" end_page="11" type="abstr">
<SectionTitle>
2. Phoneme-structure rules.
</SectionTitle>
<Paragraph position="0"> As mentioned in the Introduction a phoneme-structure rule (P-rule) is a statement predicting certain feature specifications of a single phoneme given other feature specifications of this phoneme. In order to formalize this concept some notational conventions will = B ,. ,B a set p be introduced. Let m ~ 1 &amp;quot;&amp;quot; pJ of fully specified phonemes and ~ = {fl .... 'fnl the set of n features and ~ = {+,-J the set of the two possible s~ecifications. Any phoneme B~ can then be written set of n ordered pairs: B = {~lfl,.O.~Bnfn~ with as a ~iE~ for i=1,...,n. Every set of m~nordered pairs ~ifi containing each feature only once will be called &amp;quot;phonemic set&amp;quot;; the phonemes of~ are thus special phonemic sets. This set-theoretic notation for phonemes is almost identical to the usual linguistic n~ation and will be mainly used throughout this paper; the only difference is that no ordering of the features is considered so far. It turns out that ordering of the features need be introduced only much later; for the time being it would only unnecessarily complicate the proofs.</Paragraph>
<Paragraph position="1"> Another notation for phonemes stems from the observation that there are exactly two specifications for each feature. The features can, therefore, be conceived of as Boolean variables taking the values true and false and a phoneme B can be written as a conjunction of these variables. E.g. B = -~~+fl'-f2'+f3~ in set-theoretic notation is replaced by the conjunction B(fl,fy,fs) = flAf--2^f3 (~ is the complement of f taking the value tru_~e if f takes the value false and vice versa) which takes the value tru__~e if and only if fl takes the value tru___~e, f2 takes the value false and f5 takes the value true. Thus true corresponds to the specification +,false to the specification - and B is formed from B by writing instead of +fi and ~ instead of -fi&amp;quot; This correspon- fi A dence of B and B evidently is biunique. The whole set of phonemes is in this notation described by the Boolean function</Paragraph>
<Paragraph position="3"> (Vdenotes disjunction - the logical or) which takes the value tru____~e if and only if at least one of the B(fl,...,f n) takes the value true, i.e. if the B cor-A responding to B is a phoneme of~ . For the following the complement function ~ of g given by V ^ (2) g(fl,...,fn) = C(fl,...,f n) will be of some importance, g describes the set of those phonemic sets with n features which are not phonemes of ~. This set which will be denoted by~ is in practice much larger than the set~ since there are 2 n phonemic sets with n features while the number p of phonemes of a natural language is much smaller than 2 n for usual values of n (e.g. n=12).</Paragraph>
<Paragraph position="4"> A prediction for a feature specification of a single phonem e (a P-rule) is, in the set-theoretic notation, a statement of the form (3) {~irl,.O.,~krk~ --~ ~r with ,r F, r@r i for i:l,..,k, 0~k~n-l, which is to be read as &amp;quot;if the phonemic set a =~irl,...,~krk ~.J on the left hand side of (5) is a part (a subset) of some phoneme B of~ then the feature *) r is in B necessarily specified as~&amp;quot; . Note that the condition at'B corresponds to STA~EY's &amp;quot;submatrix interpretation of rule application&amp;quot; (cp, E2J,p.413). Now, in order for (3) to be called a prediction in a sensible sense of this word two obvious requirements must be fulfilled: (i) a must occur in at least one phoneme of (ii) ~ must be uniquely determined by a and r ~or simplicity we add a further requirement (iii) a must be minimal, i.e. there is no phonemic set b~a such that b and r already suffice to uniquely determine the specification of r in B.</Paragraph>
<Paragraph position="5"> Since by (ii) a uniquely predicts~ as specification of r there is no phoneme P~ such that the phoneh = au~r~ (i.e. a plus the feature r specified mic set as~, written ~ &amp;quot;as set-theoretlc union) **) is a subset of P. Any phonemic set with n features containing h is, therefore, an element of ~. A phonemic set h with this property is called im~licant of~ . ~ore specifically, we define the notion of prime implicant of ~ : Definition l A phonemic set h = {~irl , .... ~mrm~ (l~m~n) is called prime implicant of ~ if and only if h ' (a) there is no BE~ such that ~B.</Paragraph>
<Paragraph position="6"> ~) The case k:O means &amp;quot;r is specified as ~in each phoneme of~&amp;quot;.</Paragraph>
<Paragraph position="7"> **)~= + for ~= - and ~ = - for ~ = +.</Paragraph>
<Paragraph position="8"> (b) for every proper subset b~h there exists a B~ such that b C B.</Paragraph>
<Paragraph position="9"> Condition (b) of Def.1 expresses a minimality requirement on h which will turn out to be closely related to requirement (iii) above.</Paragraph>
<Paragraph position="10"> The name &amp;quot;prime implicant&amp;quot; for h was chosen because in the Boolean notation of eqs.(1) and (2) the conjunction h corresponding to h is a prime implicant (in the technical sense of the theory of Boolean functions) of the function ~, eq.(2): An implicant of a Boolean function v of n variables is a conjunction q of m~n of these variables such that v is tru____~e whenever q is true; equivalently, if t is any conjunction of the n variables which contains q then t = true implies v = true. q is a prime implicant of v if it is an implicant of v and if every proper part s of q is not an implicant of v; equivalently, if there is at least one conjunction w of the n variables containing s such that w = tru___~e implies v = false (or V = tru___~e). By condition (a) of Def.1 P~I~ for every phonemic set P with n features with h~P; in Boolean notation ~ is any n_place conjunction containing h and P~ ~ means P = tru__~e implies ~ = tru___~e. Thus h is an implicant of ~. Condition (b) of Def.1 in Boolean notation reads &amp;quot;if ~ then there is a B with bOB such A that B = true implies g = tru___~e (or ~ = fals__~e)&amp;quot;. Thus is a prime implicant of ~.</Paragraph>
<Paragraph position="11"> The remarks following conditions (i) through (iii) together with Def.1 suggest a connection between prime implicants of l~ and P-rules. This is expressed by Theorem 1  1. From each prime implicant h = ~lrl,...,~mrm~ of~ 2.</Paragraph>
<Paragraph position="12"> Proof: I.</Paragraph>
<Paragraph position="13"> 2.</Paragraph>
<Paragraph position="14"> m P-rules</Paragraph>
<Paragraph position="16"> with aj = h\~jrj~ (idege. ~j is formed from h by omitting ~r~) can be derived which comply with con itione lil through (iii If P = a--~r (a =~lrl,...,~krk~ ,kS0) is a P-rule complying with (i) through (iii) then</Paragraph>
<Paragraph position="18"> is a prime implicant of~ . P is derived from h by 1., and h is uniquely determined by P.</Paragraph>
<Paragraph position="19"> Pj evidently has the --fdegrm of eq.(3). Since h is a prime implicant of ~ and ajch there is, by Def.l(b), a Bi~such that aj C B. Thus, Pj complies with (i)deg The feature rj omitted in aj is in B necessarily specified as ~j since it must be specified somehow and cannot be specified as OCj because then h~B contrary to Def.l(a).</Paragraph>
<Paragraph position="20"> Thus aj and rj uniquely determine ~j and (ii) is met. Suppo$6 there is a bcaj such that b and rj already uniquely determine ~j. Then there is, by Def.l(a), no B~containing c = bU~jrj~ . But this contradicts Def.l(b) since c is a proper part of h. Thus there is no such b and P complies with (iii), too.</Paragraph>
<Paragraph position="21"> There is no BG~such that h~B. Pot, otherwise, r is specified as ~ instead of ~ in some phoneme of~ containing a which contradicts (ii). Thus h is, by Def.l(a), an implicant of ~ . Each proper subset of h is part of a B~: By (i) and (ii) there exists a BE~ such that c = a~r~ is a part of B. Each proper subset of c is, therefore, also a part of this B. Each proper subset of h which does not container is a subset of a, thus a proper subset of c, thus a part of B. Let d = b U ~r~ with boa be a proper subset of h containing ~r. Suppose there is no B~such that d is a part of B. Then r is never specified as~ in all those phonemes of~ which contain b (since bCa and (i) there are such phonemes) but always as~. Thus b~a and r suffice to uniquely determine ~which contradicts (iii) for P. Therefore, also d is a part of some B~. Thus h is, by Def.l(b), a prime implicant of~ and, by 1., P is derived from h.</Paragraph>
<Paragraph position="22"> Let h' = ~lSl,...,~s~ a prime implicant of~.</Paragraph>
<Paragraph position="23"> Every P-rule derived from h' has the form P' = aj'-@~js .~ For P to be one of these P' a comparison shows that necessarily a\] = a, y~ = ~ and sj = r. Then h' = a\]u~jsj~ = au{~r} = h; thus h is uniquely determined by P.</Paragraph>
<Paragraph position="24"> According to Theorem 1 every P-rule for~ complying with requirements (i) through (iii) - it seems rather obvious that a P-rule should meet these requirements - is derived from a corresponding prime implicant of~ o The task of finding all the P-rules for~ is, therefore, equivalent to the task of finding all the prime implicants for ~ or, equivalently, the prime implicants of the Boolean function ~. This is a well-known mathematical problem which can be more or less efficiently solved on a computer using e.g. the McCLUSKEY algorithm E6S . (The efficiency of this algorithm depends rather strongly on the number n of features; n must not be too large). Moreover, this result means that, given only the set ~ of fully specified phonemes, the discovery of P-rules for this set need not depend on linguistic intuition; the complete set of P-rules can be computed via the prime implicants of which is, in turn, directly determined bye.</Paragraph>
<Paragraph position="25"> By their connection to the prime implicants of~ the P-rules are divided into equivalence classes: two P-rules will be called equivalent if and only if they are derived from the same prime implicant of~ . By Theorem 1.2 the connection between P-rule and corresponding prime implicant is extremely simple; thus equivalence of P-rules is easily tested by comparing the prime implicants. Moreover, the compatibility of an intuitively found P-rule with a given set of phonemes can also easily be tested: if a-@Mr is the P-rule then au(~r 3 must be a prime implicant of~ ; in particular, no phoneme of the set may contain au{~r) * Conditions (i) through (iii) for P-rules or, equivalently, the requirement that P-rules are to be derived from prime implicants of~ are essentially identical to the &amp;quot;true generalization condition&amp;quot; of STANLEY ( K2S, p.421). In our set-theoretic notation this condition for a rule a-~r reads ( ~ means logical implication). By the rules of Boolean algebra this is equivalent to --I(acBA~r~cB) for every B ~ (-I means negation, A means conjunction), i.e. there is no B such that h = a U(~r) CB which by Def.l(a) means  that h is implicant of l~ . Note that the true generalization condition is thus not equivalent to h being a prime implicant of ~ ; it does, in other words, not meet the minimality condition (iii). Because this condition has turned out in the proof of Theorem 1 to be rather convenient it is proposed that (iii) is added to the true generalization condition.</Paragraph>
<Paragraph position="26"> As an example consider the five labial consonants IPl,lbl,/m/,/f/,/v/ of English as given in HA~LE \[7\] , see tab.l. For simplicity only the four features</Paragraph>
<Paragraph position="28"> \[strident\] , \[nasal\] , \[continuant\] and \[voiced\] are considered and the specifications \[-vocalic 3 , \[+consonantal 3 , ~grave 3 and \[+diffuse\] common to the five consonants are omitted. ~or this small example the prime implicants of ~ can be computed directly by means of Def.l: Assuming for convenience a fixed order of the features (e.g. that of tab.l) one has ordered sequences of the specifications + and - instead of the sets used so far. Then for each k in l~k~n=4 all - (~1.2 k possible specification sequences of length k are formed and matched with tab.1. If such a specification sequence does not occur in tab.1 it is an implicant of ~ , and it is a prime implicant of~ if it does not contain any shorter implicant already found. Thus one gets five prime implicants of ~  4) \[+strid, +nasa, {-strid, +cont', {+strid,-cont~, {+nas, +cont I , {+nas ,-voic edJ and from them ten P-rules (two for each of the prime  This is the complete set of P-rules for tab.l; any other redundancy rule is not a P-rule for this set.</Paragraph>
</Section>
</Paper>

