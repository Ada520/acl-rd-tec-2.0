<?xml version="1.0" standalone="yes"?>

<Paper uid="J82-1002">
<Title>Generalized Augmented Transition Network Grammars For Generation From Semantic Networks 1</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> Augmented transition network (ATN) grammars have, since their development by Woods 1970,1973, become the most used method of describing grammars for natural language understanding and question answering systems. The advantages of the ATN notation have been summarized as &amp;quot;1) perspicuity, 2) generative power, 3) efficiency of representation, 4) the ability to capture linguistic regularities and generalities, and 5) efficiency of operation&amp;quot; \[Bates 1978, p. 191\].</Paragraph>
<Paragraph position="1"> The usual method of utilizing an ATN grammar in a natural language system is to provide an interpreter that can take any ATN grammar, a lexicon, and a sentence-as data, and produce either a parse of a sentence or a message that the sentence does not conform to the grammar. The input sentence is assumed to be a linear sequence of symbols, while the parse is usually a tree (often represented by a LISP S-expression) or some &amp;quot;knowledge representation&amp;quot; such as a semantic network. Compilers have been written \[Burton 1976; Burton and Woods 1976\] that take an ATN grammar  as input and produce a specialized parser for that grammar, but in this paper we assume that an interpreter is being used.</Paragraph>
<Paragraph position="2"> Several methods have been described for using ATN grammars for sentence generation. One method \[Bates 1978, p. 235\] is to replace the usual interpreter by a generation interpreter that can take an ATN grammar written for parsing and use it to produce random sentences conforming to the grammar. This is useful for testing and debugging the grammar.</Paragraph>
<Paragraph position="3"> Simmons 1973 uses a standard ATN interpreter to generate sentences from a semantic network. In this method, an ATN register is initialized to hold a node of the semantic network and the input to the grammar is a linear string of symbols providing a pattern of the sentence to be generated. For example, the input string might be (CA1-LOCUS VACT THEME), where CA1-LOCUS and THEME are labels of arcs emanating from the semantic node, and VACT stands for &amp;quot;active verb.&amp;quot; This pattern means that the sentence to be generated is to begin with a string denoting the CA1-LOCUS, then have the active form of the verb, and end with a string denoting the THEME.</Paragraph>
<Paragraph position="4"> The method also assumes that semantic nodes have such syntactic information stored with them as number and definiteness of nominals, and tense, aspect, mood, and voice of propositions.</Paragraph>
<Paragraph position="5"> Copyright 1982 by the Association for Computational Linguistics. Permission to copy without fee all or part of this material is granted provided that the copies are not made for direct commercial advantage and the Journal reference and this copyright notice are included on the first page. To copy otherwise, or to republish, requires a fee and/or specific permission.  Shapiro 1979 also generates sentences from a semantic network. In this method, input to the grammar is the semantic network itself (starting at some node).</Paragraph>
<Paragraph position="6"> That is, instead of successive symbols of a linear sentence pattern being scanned as the ATN grammar is traversed by the interpreter, different nodes of the semantic network are scanned. The grammar controls the syntax of the generated sentence, but bases specific decisions on the structural properties of the semantic network and on the information contained therein. The original goal in Shapiro 1975 was that a single ATN interpreter could be used both for standard ATN parsing and for generation. However, a special interpreter was written for generation grammars; indeed, the semantics of the ATN formalism given in that paper, though based on the standard ATN formalism, were inconsistent enough with the standard notation that a single interpreter could not be used. For example, standard ATNs use a register named &amp;quot;*&amp;quot; to hold the input symbol (word) currently being scanned. Unlike other registers, whose values are set explicitly by actions on the ATN arcs, the * register is manipulated directly by the ATN interpreter. In Shapiro 1975 the * register was used to hold the string being generated rather than the input symbol being scanned. The interpreter written for Shapiro 1975 also manipulated the * register directly, but in a manner inconsistent with standard ATN interpreters.</Paragraph>
<Paragraph position="7"> This paper reports the results of work carried out to remove the inconsistencies mentioned above. A generalization of the ATN formalism has now been derived that supplies consistent semantics (and so allows a single interpreter to be used) for both parsing and generating grammars. In fact, one grammar can include both parsing and generating sub-networks that can call each other. For example, an ATN grammar can be constructed so that the &amp;quot;parse&amp;quot; of a natural language question is the natural language statement that answers it, interaction with representation and inference routines being done on arcs along the way.</Paragraph>
<Paragraph position="8"> The new formalism is a strict generalization in the sense that it interprets all old ATN grammars as having the same semantics (carrying out the same actions and producing the same parses) as before.</Paragraph>
<Paragraph position="9"> The generalized ATN formalism can be used to write grammars for parsing labelled directed graphs.</Paragraph>
<Paragraph position="10"> In this paper, however, we only discuss its use in parsing two particular kinds of labelled di-graphs. One is the kind that is generally called a semantic network.</Paragraph>
<Paragraph position="11"> We consider parsing a semantic network, as viewed from some node, into a particular linear symbol structure that constitutes a surface string of English. The other kind of labelled di-graph is a linear graph all of whose arcs have the same label and whose nodes are successive words in a surface sentence. This kind of di-graph is so special that a subset of the generalized ATN formalism, namely the original formalism, has built-in facilities for traversing its arcs.</Paragraph>
<Paragraph position="12"> Since many people have implemented their own ATN interpreters, this paper is written to describe the extension to be made to any ATN interpreter to allow it to interpret generation grammars as well as parsing grammars. A key ingredient in such an extension is a systematic treatment of the input buffer and the * register. This is explained in Section 4, which is essentially a description of a set of program assertions for ATN interpreters.</Paragraph>
<Paragraph position="13"> 2. Generation from a Semantic Network - Brief Overview null In our view, each node of a semantic network represents a concept. The goal of the generator is, given a node, to express the concept represented by that node in a natural language surface string. The syntactic category of the surface string is determined by the grammar, which can analyze the structure of the semantic network connected to the node. In order to express the concept, it is often necessary to include in the string substrings that express the concepts represented by adjacent nodes. For example, if a node represents a proposition to be expressed as a statement, part of the statement may be a noun phrase expressing the concept represented by the node connected to the original node by an AGENT case arc.</Paragraph>
<Paragraph position="14"> This can be done by a recursive call to a section of the grammar in charge of building noun phrases. This section will be passed the adjacent node. When it finishes, the original statement section of the grammar will continue adding additional substrings to the growing statement.</Paragraph>
<Paragraph position="15"> In ATN grammars written for parsing, a recursive push does not change the input symbol being examined, but when the original level continues, parsing normally continues at a different symbol. In the generation approach we use, a recursive push normally involves a change in the semantic node being examined, and the original level continues with the original node. This difference is a major motivation of some of the generalizations to the ATN formalism discussed below. The other major motivation is that, in parsing a string of symbols, the &amp;quot;next&amp;quot; symbol is defined by the system, but in &amp;quot;parsing&amp;quot; a network, &amp;quot;next&amp;quot; must be specified in the grammar.</Paragraph>
</Section>
</Paper>

