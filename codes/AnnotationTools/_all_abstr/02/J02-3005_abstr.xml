<?xml version="1.0" standalone="yes"?>

<Paper uid="J02-3005">
<Title>c(c) 2002 Association for Computational Linguistics Squibs and Discussions A Note on Typing Feature Structures</Title>
<Section position="2" start_page="0" end_page="390" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> Feature structures are used by a variety of linguistic formalisms as a means for representing different levels of linguistic information. They are usually associated with more elementary structures (such as phrase structure rules or trees) to provide an additional dimension for stating linguistic generalizations. A variant of feature structures, typed feature structures, provide yet another dimension for such generalizations. It is sometimes assumed that typed feature structures have linguistic advantages over untyped ones and that they are, in general, more efficient to process. In this article we show how typing can be useful also for systems that manipulate untyped feature structures.</Paragraph>
<Paragraph position="1"> We present a method for validating the consistency of feature structure specifications by imposing a type discipline. This method facilitates a great number of compile-time checks: many possible errors can be detected before the grammar is used for parsing. Typed systems are used in one linguistic theory, Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag 1994), and we present here a different application of them for theories that employ untyped feature structures. We constructed a type signature for the XTAG English grammar (XTAG Research Group 2001), an existing broad-coverage grammar of English. Then, we implemented a type inference algorithm that operates on the feature structure specifications in the grammar. The algorithm reports occurrences of incompatibility with the type signature. We have detected a large number of errors in the grammar; four types of errors are described in the article.</Paragraph>
<Paragraph position="2"> The technique we propose was incorporated into the XTAG grammar development system, which is based on the tree-adjoining grammar (TAG) formalism (Joshi, Levy, [?] Department of Computer Science, University of Haifa, Mount Carmel, 31905 Haifa, Israel. E-mail: shuly@cs.haifa.ac.il + IRCS, University of Pennsylvania, 3401 Walnut Street, Philadelphia, PA-19104. E-mail: anoop@linc. cis.upenn.edu  Computational Linguistics Volume 28, Number 3 and Takahashi 1975), lexicalized (Schabes, Abeill 'e, and Joshi 1988) and augmented by unification-based feature structures (Vijay-Shanker and Joshi 1991). Tree-adjoining languages fall into the class of mildly context-sensitive languages and as such are more powerful than context-free languages. The TAG formalism in general, and lexicalized TAGs in particular, are well-suited for linguistic applications. As first shown by Joshi (1985) and Kroch and Joshi (1987), the properties of TAGs permit one to encapsulate diverse syntactic phenomena in a very natural way.</Paragraph>
<Paragraph position="3"> The XTAG grammar development system makes limited use of feature structures that can be attached to nodes in the trees that make up a grammar. Typically, feature structures in XTAG are flat: nesting of structures is very limited. Furthermore, all feature structures in XTAG are finitely bounded: the maximum size of a feature structure can be statically determined. During parsing, feature structures undergo unification as the trees they are associated with are combined. But unification in XTAG is actually highly limited: since all feature structures are bounded, unification can be viewed as an atomic operation. Although the method we propose was tested on an XTAG grammar, it is applicable in principle to any linguistic formalism that uses untyped feature structures, in particular, to lexical-functional grammar (Kaplan and Bresnan 1982).</Paragraph>
</Section>
</Paper>

