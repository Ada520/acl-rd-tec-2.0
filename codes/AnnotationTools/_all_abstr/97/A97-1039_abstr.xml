<?xml version="1.0" standalone="yes"?>

<Paper uid="A97-1039">
<Title>A Fast and Portable Realizer for Text Generation Systems</Title>
<Section position="1" start_page="0" end_page="265" type="abstr">
<SectionTitle>
1 Introduction
</SectionTitle>
<Paragraph position="0"> Systems that generate natural language output as part of their interaction with a user have become a major area of research and development. Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994). While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.</Paragraph>
<Paragraph position="1"> It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items). Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research. Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular. In this technical note and demo we present a new off-the-shelf realizer, REALPRO. REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanskaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation. REALPRO has the following characteristics, which we believe are unique in this combination: * REALPRO is implemented in C++. It is therefore both fast and portable cross-platform.</Paragraph>
<Paragraph position="2"> * REALPRO can be run as a standalone server, and has C++ and Java APIs.</Paragraph>
<Paragraph position="3"> * The input to REALPRO is based on syntactic dependency (roughly, predicate-argument and predicate-modifier structure).</Paragraph>
<Paragraph position="4"> * Syntactic and lexical knowledge about the target language is expressed in ASCII files which are interpreted at run-time. It can easily be updated.</Paragraph>
<Paragraph position="5">  We reserve a more detailed comparison with PENMAN and FUF, as well as with AlethGen/GL (Coch, 1996) (which is perhaps the system most similar to REALPRO, since they are based on the same linguistic theory and are both implemented with speed in mind), for a more extensive paper. This technical note presents REALPRO, concentrating on its structure, its coverage, its interfaces, and its performance.</Paragraph>
</Section>
</Paper>

