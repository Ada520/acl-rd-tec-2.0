<?xml version="1.0" standalone="yes"?>

<Paper uid="W97-1501">
<Title>Some apparently disjoint aims and requirements for grammar development environments: the case of natural language generation</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
Abstract
</SectionTitle>
<Paragraph position="0"> Grammar development environments (GDE's) for analysis and for generation have not yet come together. Despite the fact that analysis-oriented GDE's (such as ALEP) may include some possibility of sentence generation, the development techniques and kinds of resources suggested are apparently not those required for practical, large-scale natural language generation work. Indeed, there is no use of 'standard' (i.e., analysis-oriented) GDE's in current projects/applications targetting the generation of fluent, coherent texts. This unsatisfactory situation requires some analysis and explanation, which this paper attempts using as an example an extensive GDE for generation. The support provided for distributed large-scale grammar development, multilinguality, and resource maintenance are discussed and contrasted with analysis-oriented approaches.</Paragraph>
<Paragraph position="1"> 1 Introduction: a problem Grammar development environments (GDE's) for analysis and for generation have not yet come together. In fact, the mainstay of design for linguistic resource development environments is skewed very far from that necessary for generation; this is illustrated well by the following remark from an EAGLES (Expert Advisory Group for Language Engineering Standards) report describing the current &amp;quot;convergence&amp;quot; of opinion concerning the required functionality for development platforms: &amp;quot;The necessary functionality of a development platform is more or less agreed upon by grammar writers .... They should have a parser for testing the developed grammars with respect to an input string, and possibly also a generator to test for overgeneration.&amp;quot; (EAGLES, 1996, p117) This marginalization of the generation process naturally impacts on the kinds of development and debugging tools that are provided. For example, perhaps the most extensive workbench developed within the European Union, the Advanced Language Engineering Platform (ALEP: cf. (Simpkins et al., 1993)), while forced to adopt a so-called 'lean' formalism in order to achieve acceptable efficiency, nevertheless orients itself most closely to 'mainstream' linguistic formalisms such as HPSG and LFG. Neither of these formalisms have however found widespread use in larger-scale generation contexts.</Paragraph>
<Paragraph position="2"> There also continue to be substantial projects whose specific goals are to build or collect linguistic resources for language engineering--including, for example, projects such as Acquilex, Eagles, TransTerm, EuroWordNet and others} However, these projects have not apparently been configured to provide the kinds of resources that generation requires. This can be seen in the virtually zero take-up of such 'mainstream' (i.e., analysis-oriented) resources in generation projects (both monolingual and multilingual) where the goal has been to provide efficient generation of realistic, useful texts.</Paragraph>
<Paragraph position="3"> Thus, not only is there a lack of uptake of linguistic resources, there is also virtually no use of 'standard' (i.e., analysis-oriented) GDE's in current projects/applications targetting the generation of fluent, coherent texts. This unsatisfactory situation certainly requires some analysis and explanation-which this paper attempts. To do this, we first briefly illustrate our claim that the grammar development environments and approaches that are adopted in natural language generation are by and large disjoint to those developed in natural language 1Sch/itz (Schiitz, 1996) provides a useful overview of current language engineering projects where multilinguality plays a role.</Paragraph>
<Paragraph position="4"> analysis. We then show how the main property that effectively distinguishes successful generation grammars from analysis grammars (regardless of what the grammars are used for) is their orientation to communicative-function and that it is precisely this property that plays a crucial role in creating powerful and efficient grammar development environments that are suited to the generation task.</Paragraph>
<Paragraph position="5"> We illustrate this relationship between resource organization and development tools by focusing on techniques for developing and maintaining large-scale linguistic resources (mostly grammar and semantics-grammar mappings), for distributed grammar development, and for supporting multilinguality that have developed for generation work. A direct question raised by the paper is then the extent to which the techniques discussed could also be relevant and applicable to analysis-oriented development environments.</Paragraph>
</Section>
</Paper>

