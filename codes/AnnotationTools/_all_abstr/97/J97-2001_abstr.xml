<?xml version="1.0" standalone="yes"?>

<Paper uid="J97-2001">
<Title>Floating Constraints in Lexical Choice</Title>
<Section position="2" start_page="0" end_page="199" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> Given a request to communicate, a language generator typically must select information from an underlying domain representation and determine how to order this information, ultimately realizing the representation as sentences by selecting words and linearly ordering them under the syntactic constraints of the language. The problem of determining what words to use for the concepts in the domain representation is termed lexical choice. In an effort to make domain representations independent of language, there may be a variety of different words that can be used to express any concept in the domain, and a language generator must choose which one is most appropriate in the current context. A one-to-one mapping between each domain concept and a word of the language would imply that concepts are represented by words, clearly an undesirable situation. Just as there is no reason to assume that a concept uniquely determines a word, there is no reason to assume that a single concept must map to a single word; a domain concept may be expressed by multiple words, or conversely, a single word may express a combination of concepts (Talmy 1985; Zock 1988).</Paragraph>
<Paragraph position="1"> Avoiding encoding any assumptions about the mapping between domain and language has the benefit of portability; the architecture and some knowledge sources of the generator can be reused for a variety of different applications in quite different  * Mathematics and Computer Science Department, Beer Sheva, 84105 Israel. E-mail: elhadad@cs.bgu.ac.il t Computer Science Department, New York, NY 10027 USA. E-mail: kathy@cs.columbia.edu :~ Departamento de Informatica, Recife, PE 50740-540 Brazil. E-mail: jr@di.ufpe.br (~) 1997 Association for Computational Linguistics  Computational Linguistics Volume 23, Number 2 domains. However, it means the task of lexical choice is computationally complex, requiring consideration of a potentially large number of mappings between concepts and words. This is complicated by the fact that constraints on lexical choice come from a wide variety of sources: * Syntax (the choice of a particular verb influences the syntactic forms that can be used to realize its arguments, which in turn constrains the words used to lexical)ze these arguments). For example, if the main verb to allow is selected, then the object must be either a clause (allow one to select) or a noun-group (allow the selection). 1 * Semantics (the concept itself and how it is taxonomized in the domain influence which word should be used). For example, when discussing basketball, the words rebound and point realize distinct concepts under the generic concept of a player &amp;quot;performance.&amp;quot; * The lexicon (the choice of one word can constrain the choice of other words in a sentence). For example, the selection of rebound as object noun would entail preferring to grab over to score as main verb, while the selection of point would entail the opposite verb choice, since to grab rebounds and to score points are lexical collocations, whereas ?to score rebounds and ?to grab points are not.</Paragraph>
<Paragraph position="2"> * The domain (the same words are used to refer to different concepts in different domain sublanguages). For example, rebound means different things in the basketball domain and in the stock-market domain (IBM rebounded from a 3 day loss vs. Magic grabbed 20 rebounds).</Paragraph>
<Paragraph position="3"> * Pragmatics (information about speaker intent, hearer background, or previous discourse plays a role). This may lead to the decision to refer to the same situation as a glass half full or half empty.</Paragraph>
<Paragraph position="4"> Furthermore, interaction between constraints is multidirectional, making it difficult to determine a systematic ordering in which constraints should be taken into account. In fact, earlier work on lexical choice (Danlos 1986) implied that a new ordering of constraints, and thus a new architecture for lexical choice, must be developed for each new domain.</Paragraph>
<Paragraph position="5"> In this paper, we present a general approach to lexical choice that can handle multiple, interacting constraints. Our architecture positions the lexical choice module between a language generator's content planner and surface sentence generator, in order to take into account conceptual, pragmatic, and linguistic constraints on word choice. We show how the Functional Unification Formalism (FUF) (Elhadad 1993a), originally developed for representing syntactic grammars (Kay 1979), can be used to represent a generation lexicon, allowing for declarative and compositional representation of independent constraints. The order of constraint application is determined dynamically through unification, allowing for different orderings as required. Since any approach must deal with a combinatorial explosion of possible mappings and ordering of constraints, computational efficiency is in general an issue. We show control techniques we have developed within FUF to reduce overall search. In this paper,  Elhadad, McKeown, and Robin Floating Constraints in Lexical Choice we illustrate our model for lexical choice as it has been implemented in ADVISOR-II (Elhadad 1993c), a system that can advise students about course selection, but we also draw on examples from two other systems based on the same model but within different generation architectures: STREAK, a system for generating basketball game summaries (Robin 1994a; Robin and McKeown 1996) and COOK (Smadja and McKeown 1991), a system that generates stock market reports. 2 We have used this same model for lexical choice in other systems we have developed, such as COMET (McKeown et al. 1990), a multimedia explanation system for equipment maintenance and repair, and PLANDOC (Kukich et al. 1994), an automated documentation system under collaborative development with Bellcore.</Paragraph>
<Paragraph position="6"> We focus on the problem of floating constraints, constraints that cannot be mapped in a systematic way from an input conceptual representation to the linguistic structure. Instead, such constraints float, appearing at a variety of different levels in the resulting linguistic structure, depending on other constraints in the input. Such constraints pose problems (see discussion in Elhadad and Robin \[1992\]) for the top-down recursive building of the linguistic structure used by most generation algorithms (Meteer et al. 1987; Shieber et al. 1990); these algorithms typically only handle structural constraints, constraints that are consistently expressed at a given linguistic rank (e.g., the sentence, clause, group, or word rank) (Halliday 1985) in the application domain sublanguage. We consider two different types of floating constraints: * Interlexical constraints, which arise from restrictions on lexical co-occurrences such as collocations (Smadja 1991) (they are orthogonal to the mapping from input content units onto output linguistic form since they both originate from the lexicon and act upon the lexicon).</Paragraph>
<Paragraph position="7"> * Cross-ranking constraints, which arise from the fact that an input network of content units is not isomorphic with the resulting linguistic structure, allowing a single content unit to be realized by surface elements of various linguistic ranks (cross-ranking proper), or multiple content units to be realized by the same surface element (merging).</Paragraph>
<Paragraph position="8"> Sentences (1) and (2) below, generated by COOK, illustrate cross-ranking constraints. They show how time and manner can be mapped to two different surface elements of different syntactic rank in the sentence, among many other possibilities. Sentences (3) and (4), generated by STREAK, show how game result and manner can be realized as two separate surface elements or can be merged into a single element,  the verb.</Paragraph>
<Paragraph position="9"> (1) Wall Street Indexes opened strongly. (time in verb, manner as adverb) (2) Stock indexes surged at the start of the trading day. (time as PP, manner in verb) (3) The Denver Nuggets beat the Boston Celtics with a narrow margin,  Computational Linguistics Volume 23, Number 2 In these examples, the input conceptual constraints (time and manner) float, appearing at a variety of different syntactic ranks (here, verb and circumstantial), and are sometimes merged with other semantic constraints.</Paragraph>
<Paragraph position="10"> Which content units are floating and which are structural depends on the domain and the particular target sublanguage. Our corpus analysis of the basketball domain, for example, indicates that historical knowledge is floating, whereas game result information is structural. Similarly, in the student advising domain, we found course evaluation (e.g., how difficult or interesting a course is) to be floating, whereas the description of the assignments required (e.g., how many there are or whether they involve writing essays, software, or proofs) in a course is structural.</Paragraph>
<Paragraph position="11"> Floating constraints have not been addressed in a general way in previous work; most systems implicitly hardwire the choices or permit only one or two of many possibilities. In contrast, our model for lexical choice accommodates floating constraints, resulting in a system with a high degree of paraphrasing power.</Paragraph>
<Paragraph position="12"> In the following sections, we first present our general model for lexical choice, illustrating it with a relatively simple example. We then discuss different types of constraints and the problems they pose, presenting the techniques we have developed within FUF to address these issues, turning from structural constraints, to pragmatic cross-ranking constraints, and to interlexical constraints. Finally, we compare our approach with other work on lexical choice, closing with a summary of our contributions. 2. An Architecture for Lexical Choice The place of lexical choice in the overall architecture of generation systems has varied from project to project. Due to the varied nature of the constraints on lexical choice, exactly how lexical choice is done often depends on the type of constraints a system design accounts for. For example, if syntactic and lexical constraints are the research focus, it may make sense to delay lexical choice until late in the generation process, during syntactic realization. If only conceptual constraints are accounted for, lexical choice may be done early on, for example, during content planning by associating concepts with the words or phrases that can realize them.</Paragraph>
<Paragraph position="13"> In this section, we describe a general model for lexical choice as part of an overall generation system architecture. Due to the wide variety of constraints on word selection that we consider, lexicalization is positioned after the content of the generated text has been determined and before syntactic realization takes place. We detail the nature of input and output to the lexical choice module, thus specifying the tasks the lexical choice module performs and the tasks that are expected to be done elsewhere in the system. We illustrate, through a relatively simple example that depends on a single type of constraint, how FUF and unification are used for lexicalization. Our criteria for a model for lexical choice are fourfold:</Paragraph>
<Paragraph position="15"> It must be able to use the full variety of constraints whether pragmatic, semantic, lexical, or syntactic.</Paragraph>
<Paragraph position="16"> It must be able to apply constraints in a flexible order.</Paragraph>
<Paragraph position="17"> It must avoid encoding assumptions about the mapping between domain concepts and lexical structure.</Paragraph>
<Paragraph position="18"> It must be able to handle floating constraints.</Paragraph>
<Section position="1" start_page="198" end_page="199" type="sub_section">
<SectionTitle>
2.1 Lexical Choice within a Generation System Architecture
</SectionTitle>
<Paragraph position="0"> Generation systems perform two types of tasks: one conceptual, determining the content of the text to be generated, and one linguistic, determining the form of that text (McDonald 1983; McKeown 1985). Typically, a generator has two modules, each corresponding to one of these two tasks, a content planner and a linguistic realizer.</Paragraph>
<Paragraph position="1"> While many systems allow for interaction across these components, there is general consensus that these two components can be separated (Reiter 1994). Furthermore, within the linguistic component, there appears to be further consensus that the task of syntactic realization can be isolated. As evidence, note that a number of dedicated syntactic realization components have been developed such as SURGE (Elhadad and Robin 1996), NICEL (Matthiessen 1991), MUMBLE (Meteer et al. 1987), and TAGs (Yang, McCoy, and Vijay-Shanker 1991; Harbusch 1994). Such components expect as input a specification of the thematic structure of the sentence to generate, with the syntactic category and open-class words of each thematic role. 3 Thematic structure involves roles such as agent, patient, instrument, etc. It is opposed to surface syntactic structure which involves roles such as subject, object, adjunct, etc. Due to general syntactic alternations (Levin 1993) such as passive, dative, it-extraposition, or clefting, the mapping from thematic roles onto surface syntactic roles is one-to-many. The role of the syntactic grammar is to (1) map the thematic structure onto a surface syntactic one, (2) enforce syntactic rules such as agreement, (3) choose the closed-class words, (4) inflect the open-class ones, and (5) linearize the surface syntactic tree into a natural language string. These tasks indicate the kind of information the syntactic grammar needs as input. For example, unless the system is to choose randomly, it needs enough information to choose between different syntactic options available in the grammar.</Paragraph>
<Paragraph position="2"> Furthermore, input must either specify all words, or provide enough features so that the syntactic grammar can lexicalize any words that are syntactically determined.</Paragraph>
<Paragraph position="3"> Lexical choice could be carried out at any number of places within this standard architecture. Figure I shows the typical language generation architecture used in many systems, indicating the different places for lexical choice to occur. One option would be to position lexical choice as part of syntactic realization, as just a very specific type of syntactic decision (i.e., option 3 in Figure 1). Researchers who work on reversible 3 Words are traditionally divided into (a) open-class words such as nouns, verbs, adjectives and adverbs and (b) closed-class words (also called fimction words) such as articles, pronouns, and conjunctions. Open classes are large and constantly expanding while closed classes are small and stable.</Paragraph>
<Paragraph position="4"> Distinguishing elements in an open class requires semantics while in a closed class, it can be done on syntactic grounds only.</Paragraph>
<Paragraph position="5">  Computational Linguistics Volume 23, Number 2 grammar formalisms, using the same grammar to both parse and generate language, take this approach (Van Noord 1990; Shieber and Shabes 1991; Strzalkowski 1994).</Paragraph>
<Paragraph position="6"> The systemic grammar paradigm also takes this approach, where lexical choice is the most &amp;quot;delicate&amp;quot; of decisions, occurring as a by-product of many high-level syntactic choices. However, in computational implementations of the systemic paradigm, such as NIGEL (Mann and Matthiessen 1983), only the syntactic constraints on lexical choice are handled during syntactic realization. The semantic constraints on lexical choice are in effect taken into account in the input knowledge representation (i.e., option 1 in Figure 1).</Paragraph>
<Paragraph position="7"> There are two problems with option 3 (during syntactic realization). First, the range of constraints on lexical choice covered in this line of work is quite restricted and we have some question about whether it could be extended to include the pragmatic constraints considered here. Furthermore, since words are selected only once the full syntactic tree is constructed, it would be quite difficult, if not impossible, to account for floating constraints. Such constraints cannot be considered solely from local positions within a constructed tree, but require some global knowledge of interaction between semantic units.</Paragraph>
<Paragraph position="8"> If lexical choice is not part of the syntactic realization component, then all decisions regarding open-class word selection must be made before the grammar is invoked# They then must occur either as part of content planning or after all content has been determined and expressed in a language-independent manner. While some researchers have directly associated words with each concept in the domain-knowledge base (e.g., Reiter 1991; Swartout 1983), this approach does not allow for consideration of syntactic and lexical constraints unless a phrasal lexicon is used (e.g., Kukich 1983b; Danlos 1986; Jacobs 1985; Hovy 1988). Using a phrasal lexicon, however, means hand-encoding the many mappings of multiple constraints onto multiword phrasings. It thus does not allow for compositional lexical representation (Pustejovsky and Boguraev 1993), and entails a combinatorial explosion in the number of entries to cover the variations of phrases that are possible in different contexts. This approach thus does not allow for scaling up paraphrasing power (see Robin and McKeown \[1996\] for a quantitative evaluation of the scalability gains resulting from the compositional word-based approach).</Paragraph>
<Paragraph position="9"> By waiting until content planning is complete, lexical and syntactic constraints can be represented explicitly and independently of one another, instead of being embedded into full phrases, allowing for a more economical and flexible word-based lexicon that incorporates phrasal constraints.</Paragraph>
<Paragraph position="10"> The only remaining option is to position the lexical choice module between the content planner and the syntactic realization module. Note that some high-level decisions about sentence structure must be made early on with this architecture (i.e., before syntactic realization), since, for example, selecting the verb imposes syntactic constraints on how its arguments can be realized. This is desirable since it allows a system to take into account only those syntactic constraints on lexical choice that are relevant. In fact, in the eight domains for which we have implemented generators, we have never found a case where other syntactic decisions made during realization force the lexical chooser to undo an earlier decision. This experience strongly supports modularization between lexical choice and syntactic realization. 5</Paragraph>
</Section>
</Section>
</Paper>

