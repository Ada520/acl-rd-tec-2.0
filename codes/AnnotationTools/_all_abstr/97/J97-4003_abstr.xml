<?xml version="1.0" standalone="yes"?>

<Paper uid="J97-4003">
<Title>A Computational Treatment of Lexical Rules in HPSG as Covariation in Lexical Entries</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> In the paradigm of HPSG, lexical rules have become one of the key mechanisms used in current linguistic analysis. Computationally, lexical rules have mainly been dealt with in two ways: On the one hand, lexical rules are used to expand out the full lexicon at compile-time. On the other hand, lexical rules are encoded as unary phrase structure rules. Both of these computational treatments of lexical rules, however, have significant shortcomings with respect to lexical rules as used in HPSG.</Paragraph>
<Paragraph position="1"> A computational treatment expanding out the lexicon cannot be used for the increasing number of HPSG analyses that propose lexical rules that would result in an infinite lexicon. Most current HPSG analyses of Dutch, German, Italian, and French fall into that category. 1 Furthermore, since lexical rules in such an approach only serve in a precompilation step, the generalizations captured by the lexical rules cannot be used at run-time. Finally, all such treatments of lexical rules currently available presuppose a fully explicit notation of lexical rule specifications that transfer properties not changed by the lexical rules to the newly created lexical entry. This conflicts with the standard assumption made in HPSG that only the properties changed by a lexical rule need be mentioned. As shown in Meurers (1994) this is a well-motivated convention since it avoids splitting up lexical rules to transfer the specifications that must be preserved for different lexical entries.</Paragraph>
<Paragraph position="2">  the Complement Extraction Lexical Rule (Pollard and Sag 1994) or the Complement Cliticization Lexical Rule (Miller and Sag 1993) to operate on those raised elements. Also an analysis treating adjunct extraction via lexical rules (van Noord and Bouma 1994) results in an infinite lexicon. (~) 1997 Association for Computational Linguistics  Computational Linguistics Volume 23, Number 4 Treatments of lexical rules as unary phrase structure rules also require their fully explicit specification, which entails the last problem mentioned above. In addition, computationally treating lexical rules on a par with phrase structure rules fails to take computational advantage of their specific properties. For example, the interaction of lexical rules is explored at run-time, even though the possible interaction can be determined at compile-time given the information available in the lexical rules and the base lexical entries. 2 Based on the research results reported in Meurers and Minnen (1995, 1996), we propose a new computational treatment of lexical rules that overcomes these shortcomings and results in a more efficient processing of lexical rules as used in HPSG. We developed a compiler that takes as its input a set of lexical rules, deduces the necessary transfer of properties not changed by the individual lexical rules, and encodes the set of lexical rules and their interaction into definite relations constraining lexical entries. Each lexical entry is automatically extended with a definite clause encoding of the lexical rule applications which the entry can undergo. The definite clauses thereby introduce what we refer to as systematic covariation in lexical entries.</Paragraph>
<Paragraph position="3"> Definite relations are a convenient way of encoding the interaction of lexical rules, as they readily support various program transformations to improve the encoding: We show that the definite relations produced by the compiler can be refined by program transformation techniques to increase efficiency. The resulting encoding allows the execution of lexical rules on-the-fly, i.e., coroutined with other constraints at some time after lexical lookup. The computational treatment of lexical rules proposed can be seen as an extension to the principled method discussed by G6tz and Meurers (1995, 1996, 1997b) for encoding the main building block of HPSG grammars--the implicative constraints--as a logic program.</Paragraph>
<Paragraph position="4"> The structure of the paper is as follows: We start with a brief introduction of the formal background on which our approach is based in Section 2. We then describe (Section 3) how lexical rules and their interaction can be encoded in a definite clause encoding that expresses systematic covariation in lexical entries. We show how the encoding of lexical rule interaction can be improved by specializing it for different word classes and, in Section 4, focus on an improvement of this specialization step by means of program transformation techniques. A further improvement relevant to on-the-fly application of lexical rules is presented in Section 5. In Section 6, we discuss implementation results and illustrate the efficiency of the proposed encoding. A comparison with other computational approaches to lexical rules (Section 7) and some concluding remarks (Section 8) end the paper.</Paragraph>
</Section>
</Paper>

