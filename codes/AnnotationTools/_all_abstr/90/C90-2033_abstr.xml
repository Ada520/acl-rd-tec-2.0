<?xml version="1.0" standalone="yes"?>

<Paper uid="C90-2033">
<Title>A t3ottom-up Generation for Principle-based Grammars Using Constraint Propagation</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1 Introduction
</SectionTitle>
<Paragraph position="0"> The generation of strings from logical forms was studied intensively by \[Shi88,89\]\[Ca189\]. The study of this problem shed light not only on the efficiency and soundness of generation algorithms, but also on the descriptive appropriateness of grammar itself.</Paragraph>
<Paragraph position="1"> A generation algorithm based ou the Early's method has proposed, which is capable of analyzing and generating sentences in a uniform architecture \[Shi88\]. In this architecture the criterion of&amp;quot;semantic monotonicity&amp;quot; is assumed to reduce fruitless generation. As Shieber has mentioned, this method is still inefficient and limited, and ,instead, has shown an efficient and general top-down generation algorithm using the semantic-head concept 1 \[Shi89\].</Paragraph>
<Paragraph position="2"> An algorithm for Categorial Unification Grammar(C.UG) is mentioned in \[Ca189\]. As to the important ~:ole of lexicon, this grammar shares the same property as principle-based grammars, but difthrs in that CUG has grammar rules in the lexicon(This enables top-down generation with prediction as discussed in \[Shi89\]). The identity semantic problem and the lexical indexing problem are some of the same problem noted in principle-based grammars.</Paragraph>
<Paragraph position="3"> Generation based on Lexical Functional Grammar(LFG) is formalized in \[Wed88\]. He defined the derivability and the generability of f-structureto-string and semantic-structure-to-string mapping. These concepts seem to be suitable for top-down lPrecisely his algorithm tMces a mixture of top-down and top-down way.</Paragraph>
<Paragraph position="4"> strategies. His idea is intrigning in that discourse information, such as topic, can be reflected on an output string. Bottom-up generation also has the possibility of incorporating this information. This issue will be discussed later.</Paragraph>
<Paragraph position="5"> I propose a bottom-up generation algorithm for principle-based grammars, which makes use of the same grammar as a parser. Bottom-up generation is inefficient due to a high degree of nondeterminism.</Paragraph>
<Paragraph position="6"> It is limited by its inability to process se,nantic expressions created by grammar rules. It also has an identity semantic problem. This paper describes the solution to these problems and the issues concerning implementation of the algorithm using a constraint logic programming language, cu-PROLOG.</Paragraph>
<Paragraph position="7"> First, the problems of bottom-up generation are shown. Next the generation algorithm using constraint propagation and solutions to these problems are considered. Third, some issues concerning implementation and an example of this algorithm are mentioned. Finally, the problem of logical form equivalence, lexical indexing, and controlled search using the discourse information are discussed.</Paragraph>
<Paragraph position="8">  for top-down operations. The reasons for this are; (1) as principle-based grammars have few skeleton rules, top-down operations that are assumed to use rules are not adequate for them, (2) much information is in lexical items instead of grammar rules in principle-based gramm~Lrs, and (3) the construction of semantic expressions is intu null itively adequate for bottom-up operations ~.</Paragraph>
<Paragraph position="9"> Therefore, an efficient bottom-up generator for principle-based grammars must be developed.</Paragraph>
<Paragraph position="10"> Bottom-up generation has two advantages; it can use lexical information at an early phase, and can bottom-up strategy. But generation is fundamentMly driven in a 2U:aification can be used for bl-dlrectional operations. However, if you need destructive semantic operations('destructive' means that a resultant semantic expressions cannot be constructed from base semantic expressions without these special functions), unificatlon cannot be used for these operations.</Paragraph>
<Paragraph position="11">  avoid the left recursion because of the property similar to bottom-up parsing, tIowever, bottom-up generation has three problems\[Shi88,89\]\[Ca189\];  (1) inefficiency because of a high degree of nondeterminism, null (2) limitation which is caused by inability to process semantic expressions created by grammar rules, and (3) vestigial\[Shi88\], or identity semantic prob- null lem\[Ca189\] (hereafter called identity semantic problem). null (2) and (3) relate to completeness and coherence problems\[Wed88\].</Paragraph>
<Paragraph position="12"> Inefficiency because of a high degree of nondeterminism means that a naive bottom-up generation algorithm cannot use semantic information properly, and many semantic-irrelevant subexpressioas that are syntactically correct will result.</Paragraph>
<Paragraph position="13"> One of the reasons that Shieber adopted a top-down strategy is that he insisted on the existence of logical tbrms produced by gramnmr rules. This assumpti0n means that sub-semantic expressions cannot be derived from resultant semantic ones that are different from normal ones. It is shown later that if we permit this kind of destructive semantic operation, we cannot obtain an efficient algorithm.</Paragraph>
<Paragraph position="14"> An identity semantic problem is common among generation algorithms using lexical-based grammars.</Paragraph>
<Paragraph position="15"> The semantic expressions are classified into substantial eh'ments that contribute to the whole semantic expres.~ions, and functional elements(these are identity semantic expressions) without influencing the whole ones. Examples of tile functional elements are complementisers in English, or case-marking postposition ~n 3apanese. Simply speaking, the solution is to introduce these items at some time, but this also produces high inefficiency.</Paragraph>
</Section>
</Paper>

