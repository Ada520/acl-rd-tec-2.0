<?xml version="1.0" standalone="yes"?>

<Paper uid="C90-1012">
<Title>The Generalized LR Parser/Compiler V8-4: A Software Package for Practical NL Projects</Title>
<Section position="1" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> This paperldescribes a software package designed for practical projects which involve natural language parsing. \]he Generalized LR Parser/Compiler V8-4 is based on Tomita's Generalized LR Parsing Algorithm \[7, 6\], augmented by pseudo/full unification modules.</Paragraph>
<Paragraph position="1"> While the parser/compiler is not a commercial product, it has been thoroughly tested and heavily used by many projects inside and outside CMU last three years. It is publicly available with some restrictions for profit-making industries 2. It is written entirely in CommonLisp, and no system-dependent functions, such as window graphics, are used for the sake of portabili.ty. Thus, it should run on any systems that run CommonLisp in principle 3, including IBM RT/PC, Mac II, Symbolics and HP Bobcats.</Paragraph>
<Paragraph position="2"> Each rule consists of a context-free phrase structure description and a cluster of pseudo equations as in figure 1-1. The non-terminals in the phrase structure part of the rule are referenced in the equations as x0... xn, where x0 is the non-terminal 1Many members of CMU Center for Machine Translation have made contributions to the development of the system. People who implement(~ parts of the system, besides the author, are: Hideto Kagamida, Kevin Knight, Hiroyuki Musha and Kazuhiro Toyoshima. People who made contributions in maintaining the system include: Steve Morrisson, Eric Nyberg, Hiroakl Saito and Hideto Tomabechi. People who provided valuable comments/bug reports in writing and debugging grammars include: Donna Gates, Lori Levin, Toru Matsuda and Teruko Mitamura. Other members who made indirect contributions in many ways include: Ralph Brown, Jaime Carbonell,</Paragraph>
<Paragraph position="4"> in the left hand side (here, &lt;DEC&gt;) and xn is the n-th non-terminal in the right hand side (here, xl represents &lt;NP&gt; and x2 represents &lt;vP&gt;). The pseudo equations are used to check certain attribute values, such as verb form and person agreement, and to construct a f-structure. In the example, the first equation in the example states that the case of &lt;NP&gt; must be nominative, and the second equation states that the form of &lt;VP&gt; must be finite. Then one of the following two must be true: (1) the time of &lt;VP&gt; is present and agreements of &lt;NP&gt; and &lt;VP&gt; agree, OR (2) the time of &lt;VP&gt; is past. If all of the conditions hold, let the f-structure of &lt;DEC&gt; be that of &lt;VP&gt;, create a slot called &amp;quot;subj&amp;quot; and put the f-structure of &lt;NP&gt; there, and create a slot called &amp;quot;passive&amp;quot; and put &amp;quot;-&amp;quot; there. Pseudo equations are described in detail in section 3.</Paragraph>
<Paragraph position="5"> Grammar compilation is the key to this efficient parsing system. A grammar written in the correct format is to be compiled before being used to parse sentences. The context-free phrase structure rules are compiled into an Augmented LR Parsing Table, and the equations are compiled into CommonLisp functions. The runtime parser then does the shift-reduce parsing guided by the parsing table, and each time a grammar rule is applied, its CommonLisp function compiled from equations is evaluated.</Paragraph>
</Section>
</Paper>

