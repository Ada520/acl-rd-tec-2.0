<?xml version="1.0" standalone="yes"?>

<Paper uid="C90-2051">
<Title>Int'l Conf on Theoretical and Methodological Issues in the Machine Translation of Natural Languages</Title>
<Section position="2" start_page="0" end_page="294" type="abstr">
<SectionTitle>
3. Hnverting Non-ID/LP Grammars
</SectionTitle>
<Paragraph position="0"> Obtaining realistic bi-directiondlformulati0n,; in grammars not liavi \]g an ID/LP partitioning of&amp;quot; information is .problematical, because extending, theh&amp;quot; 0rdering provisions to deal not. only with syntactic correctness but also with semantic and textual factors exacerbates an aheady dillicull situatiorl with .regard to ordering in such grammars. t To justit}C/ this statement, we look first, at current trends in non-ll)/1.P grammars, and then at necessary extenS\]0t&amp;quot;;S, null  ,3,1 Trends in Non-ID/LP Grammars In some contemporary versions of paradigms whose basic rules were originally intended to subsume both &amp;quot;l l)&amp;quot; and &amp;quot;LP&amp;quot; information, infbrmation is reorganized so the information expressed by the basic rules is quite limited, and additions are needed to express the remainder. The fundamental cause of the modifications is the need to effectively accornmodate the relatively fi'ee orderings in clause constittmnts of many languages.</Paragraph>
<Paragraph position="1"> Thus, fbr example, in augmented phrase structure grammars (APSGs), which include definite clause grammars, it is inconvenient |o specify each legal dependent ordering by a separale phrase structure rule. Instead, as discussed by Jensen (1987), it is more convenient to l;,)cus on binary rules, combining a node containing a head with one of its modifiers, e.g., VPO -&gt; VP\] hiP; VPO -&gt; VPl PP; etc, tJsing lhese binary forms, tile phrase structure portion of the rules indicate not much more than the side of a head on wMch a modifier may occur. The &amp;quot;augmental.ions&amp;quot; have a number of responsibilities. They must indicale ordering constraints among siblings in terms of fe, atures recording subl.ree &amp;quot;states&amp;quot; (i.e., to Ihe exlent thai such slates are nol implied by lhe category names). Also, explicit facilities are needed fbr sh'ucture building to avoid separale nodes tot each rule applied. 1 lrinally, if tlle rules are used in combination with a lexicat orienlation, since modifiers are indicated in phrase structure rules by general category (e.g., NP), augmenlations must locale and speci\[}7 tire relationship hetween the modifier category and the specific modifier expressed type (e.g., an expected complement).</Paragraph>
<Paragraph position="2"> 'lhe resull of this (necessary) movement of fimction away Iiom I:he basic rules of the paradigm is a tendency toward somewhat laborious, redundant speciticalion.</Paragraph>
<Paragraph position="3"> &amp;quot;l'o illustrale lhe kind of redundancy inw)lved, we cow sh'uct an AI&amp;quot;SG style bina:y rtfle for allachment of indirect objects.</Paragraph>
<Paragraph position="4"> &amp;quot;the example assumes a lexicon identil}'ing potential rnodifiers of a head by frarnes, which, by unification, map between syntactic and semantic representations of' those modifiers. To allow lbr ordering provisions, modilicr fi'arnes \]rave associated labels, such as &amp;quot;indobj&amp;quot;. We also assume that semantic representations of dependents irmlude valency numbers for complemenls. To avoid the development of two examples, we also ensure that the rule is bi-directionally applicable.</Paragraph>
<Paragraph position="6"> This rule can be understood bi-direcfionally, if' we assume tllat both the interpreter and &amp;quot;choosemodifier&amp;quot; are directlon-sensitive. In parsing the interpreter finds a constituent unlI)ing with (cat = vp) adjacent to one unifying with (cat = rip) and instantiates an almost empty constituent VP0 (cat = vp). &amp;quot;Choosemodifier&amp;quot; then checks the lexicon to see if the head of VPI expects a modifier with label &amp;quot;indobj&amp;quot; whose syntactic subframe unifies with the constituent NP, and whose valency number is not yet tbund as a modifier in VPl. If so, it returns the result of the full unification as M, and the current value of VP1 .modifiers as M 1.</Paragraph>
<Paragraph position="7"> &amp;quot;Eunify ~ destructively unifies two structures except for file listed attributes. This serves in parsing to project head featnres upward. In parsing lhe next &amp;quot;unify&amp;quot; function ensures t\]Jat a direct object has not yet been included in VPl. The remainder of the rule, in parsing, creates the dependent list for VP(I by expanding that of VPI to include the indirect object.</Paragraph>
<Paragraph position="8"> Similar rules could be constructed for less strictly ordered complements, and for adjuncts.</Paragraph>
<Paragraph position="9"> These operations have considerable inherent redundancy even though much flmction is abstracted out within &amp;quot;choosemodifier&amp;quot;. The &amp;quot;choosemodifier&amp;quot; operation occurs in all complement attachment rules. Feature projection and structure building occur in all rules.</Paragraph>
<Paragraph position="10"> lqnally, the actual precedence rt, le aspects can be expressed more perspicuously than via feature state testing. Looking ahead slightly, one way of&amp;quot; summarizing the situation is to say that when a grammar paradigm which originally combines qD&amp;quot; and &amp;quot;LW resorts to binary rules, especially in the presence of a lexical focus, the grammar becomes, to a hu'ge extent, a head-driven grammar, without the ability to lake filll advantage of the facloriug opportunities atlbrded.</Paragraph>
<Section position="1" start_page="294" end_page="294" type="sub_section">
<SectionTitle>
3.2 Extensions for Bi-.Directionality
</SectionTitle>
<Paragraph position="0"> So far we have covered somewhat old ground. Why are these modified approaches especially problematic in a bi-dircctional context? Because there one is laced with an unpleasant choice between probably untenable complexity and unnecessary generation.</Paragraph>
<Paragraph position="1"> To justil) lhis claim, we return to the rule illustrated in section 3.1, first examining ils assumed operation in a generative direction.</Paragraph>
<Paragraph position="2"> In generation the interpreter instantiates almost empty constituents VPI and NP. &amp;quot;Choosemodifier&amp;quot; then aU.empts to find an expected modifier frame for the head of VP0 with the given label whose semanlJc subfi'ame (containing a valency number) unifies with one of the actual modifiers (VP0.modifiers) of VP0, and whose syntactic subfi'ame unifies with NP, returns the result as M, and the remainder of the modifiers as M1, etc.</Paragraph>
<Paragraph position="3">  But such rules do not really satisfy tire requirements o\[&amp;quot; generation. They describe syntactically correct structures but specify no ordering constraints and preferences relating to either semantic considerations (e.g., required orderings of adjective types in English, and conventional orderings of verb modifiers) or to textual considerations such as topic and locus. In parsing such provisions are needed to detect textual features, and in generation they m'e needed to use textual features to determine ordering. if these provisions were added, the &amp;quot;feature testing&amp;quot; aspects relating to ordering would become considerably more complicated, if expressible at all. This is because detecting and using textual considerations seems to involve taking irrto account the entire complex of&amp;quot; moditiers tbr a head, which is extremely awkward in terms of binary phrase structure rules.</Paragraph>
<Paragraph position="4"> llajicova (1989) describes topic/focus determination conditions for both English and Czech; they involve both semantic role information and complex sibling relationships. If those conditions were expressed in tile context of binary rules, it seems that a rule such as</Paragraph>
<Paragraph position="6"> in the parse would have the responsibility of assigning x to &amp;quot;lbcus&amp;quot; if there has been a break to the left of x in the conwmtional ordering of dependent roles (for Czech), and irrdeterminate otherwise (until ffu'ther dependents are found). In generation the rule might be licensed at a stage in generation where x is either (a) part of the topic, and VP0 contains only topic dependents, or (b) part of the tbcus and ranks highest of the dependents in VP0 in the systemic order'. (Topic/focus identification criteria for \[:.nglish are also considered by I lajicova, and are more complicated).</Paragraph>
<Paragraph position="7"> So adding textual provisions to phrase structure rules would pose a considerable challenge. Simply put, attaching dependents to heads one at a time is a convenient approach in parsing, but detaching them one at a time is not a convenient approach for generation.</Paragraph>
<Paragraph position="8"> On the other hand, if textual provisions are omitted from the grammar, then generation would produce all syntactically legitimate sentences. One would then use additional rule sets to select among all the generated utterances based on semantic and textually based prefer- null l lead driven grammars which combine a lexical focus with a strict ID/LP partitioning avoid the problems described above. We use Slot Grammar as an example.</Paragraph>
<Paragraph position="9"> Ttle lexicon formulation of Slot Grammar is interesting in that it identifies dependents, both complements and adjuncts, by &amp;quot;slotnames&amp;quot;, a device originating in earlier work by McCord (1980). The (alternative) sh'uctures which can be used to realize those slots are Ihctored out into separate &amp;quot;filler rules&amp;quot;. These rules contain conditions on both prospective fillers and associated heads. They can thus be used to constrain/adjust features of the constituents under consideration, e.g., to instantiate agreernent. In other words, Ihey can be used to express many 11) constraints.</Paragraph>
<Paragraph position="10"> The basic linear precedence conditions of Slot Grammar are expressed by two types of rules. &amp;quot;Head/Slot&amp;quot; rules indicate tile sides of the head on which a particular &amp;quot;slot&amp;quot; may appear. These rules are conditional in terms of unifiers for both head and slot filler. &amp;quot;Slot/slot&amp;quot; rules indicate, again conditionally, precedence rules among slots on the same side of a head.</Paragraph>
<Paragraph position="11"> Organizing infbrmation in tiffs way allows the elimination of the explicit: specification of many aspects of the  rule shown in section 3.1 : 1. Association of &amp;quot;categories&amp;quot; with complements and adjuncts is eliminaled - ordering is stated in terms of slots rather than the more general syntactic categories. null 2. &amp;quot;ChoosemodiIier&amp;quot; becomes lhe basic, built-in control operation of the parser, and need not be expressed explicitly 3. Struchn-e building operations are, to a large extent,  implicit. Only variations in feature projection, etc treed be expressed explicitly.</Paragraph>
<Paragraph position="12"> The remainder of tire information in the rule is expressed by two short rules, one whlch indicates that indirect objects thll on the right sides of beads, and the other that they precede dh'ect objeds.</Paragraph>
<Paragraph position="13"> The revised organization o1' information also provides the basis fbr dealing with semantic and textually corrditioned ordering requirements without either undue complexity or exhaustive generation. This is because the inherent modularity allows the use of different control schemes for parsing and generation. In parsing the control scheme can be ~attach one dependent at a time&amp;quot;, using immediate dominance rules and basic linear precedence constraints together. In generation the control scheme can be altered to first generate sets of dependent&amp; using just immediate dominance rules, and then 2 There have been efforts to combine textual considerations with non-il)/l,P grammars. For example, Uszkoreit (1998) uses exhaustive enumeration of alternative modifier orderings, irmluding complements and adjuncts, with selection among alternatives made by a focus feature. However, in parsing, the suggestion must somehow &amp;quot;collapse&amp;quot; to a set-oriented approach, using the enumerated alternatives as a kind of LP rule. Also, as implied by the results of ltajicova (1989), and explicitly argued by Hauenschild (1988), these provisions are not sufiqdent. 296 3 ordering them using both basic precedence constraints and preference-oriented ones.</Paragraph>
</Section>
</Section>
</Paper>

