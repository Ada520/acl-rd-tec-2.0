<?xml version="1.0" standalone="yes"?>

<Paper uid="J92-1003">
<Title>Languages Generated by Two-Level Morphological Rules-</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Background
</SectionTitle>
<Paragraph position="0"> Koskenniemi (1983a, 1983b, 1984) proposed a rule-system for describing morphological regularities in a language, depending centrally on the idea of matching two sequences of symbols--a lexical string (made up of the lexical forms of morphemes) and a surface string (the sequence of characters in the normal, inflected, form of the word).</Paragraph>
<Paragraph position="1"> (In general, symbols could be orthographic or phonological; here we shall abstract from this linguistic issue, and merely consider strings of atomic symbols, which could be phonemes, typewritten characters, or any other separate entities).</Paragraph>
<Paragraph position="2"> Koskenniemi (1983a) originally described the rules in two alternative forms-high-level rules and finite-state transducers. The high-level rules were given only an informal interpretation, and were used as an expository device to state the linguistic regularities more perspicuously. The formalism that was actually used to write and implement two-level morphological grammars was parallel combinations of finite-state transducers. Koskenniemi's own implementation was an interpreter for parallel transducers, which were directly written by the linguist as rules in their own right. Also, various linguistic analyses presented in Dalrymple et al. (1983) follow this approach, expressing rules as transition tables for transducers, and Antworth (1990) describes a recent implementation based wholly on transducers being written directly. Nevertheless, Koskenniemi conjectured that an automatic compilation procedure could be  (~) 1992 Association for Computational Linguistics Computational Linguistics Volume 18, Number 1 devised to transform the more readable high-level form into the more directly implementable parallel transducer form. Koskenniemi (,1985) refined the notation and sketched a compilation method, although he still did not provide a detailed declarative definition of the meaning of the high-level rules. Various implementations that compile variants of the notation into arrangements of transducers have been developed (e.g. Karttunen et al. 1987; Ritchie et al. 1991).</Paragraph>
<Paragraph position="3"> The general view of this earlier work was that the rule notation was a mere &amp;quot;syntactic sugar&amp;quot; for parallel combinations of arbitrary transducers, and that there was no difference in meaning or power between the two formalisms.</Paragraph>
<Paragraph position="4"> This paper establishes the following:  an alternative (declarative) statement of the meaning of the high-level rule notation is possible, without recourse to compilation into finite-state transducers; the usual two-level morphological mechanism is more limited than arbitrary transducers in its ability to define relationships between strings; the use of a special boundary symbol slightly increases the generative power of the model; for any two-level morphological grammar, there is an equivalent one in a simpler normal form; the family of languages generated by two-level rules is not closed under union or complementation, but is closed under intersection.</Paragraph>
</Section>
</Paper>

