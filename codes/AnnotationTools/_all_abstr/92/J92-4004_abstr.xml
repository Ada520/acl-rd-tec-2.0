<?xml version="1.0" standalone="yes"?>

<Paper uid="J92-4004">
<Title>Using Descriptions of Trees in a Tree Adjoining Grammar</Title>
<Section position="2" start_page="0" end_page="485" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> A number of grammatical systems and linguistic theories, such as Functional Unification Grammars (FUGs), Lexical Functional Grammars (LFGs), Generalized Phrase Structure Grammars (GPSGs), and Head-driven Phrase Structure Grammars (HPSGs), are said to take the unification-based approach to grammars. A common aspect shared by these grammars or theories is that they are based on specifying constraints that define well-formed structures. This work discusses viewing Tree Adjoining Grammars (TAG) in such a manner and embedding it in a unification-based framework.</Paragraph>
<Paragraph position="1"> Tree Adjoining Grammars (TAG) were first introduced by Joshi, Levy, and Takahashi (1975). A preliminary study of this formalism, from the point of view of its formal properties and linguistic applicability, was carried out by Joshi (1985). A detailed study of the linguistic relevance of TAG was done by Kroch and Joshi (1985).</Paragraph>
<Paragraph position="2"> Abeille et al. (1990) discuss a fairly substantial grammar for English using the lexicalized approach to TAG that was originally proposed by Schabes, Abeille, and Joshi (1988).</Paragraph>
<Paragraph position="3"> * Department of Computer and Information Sciences, University of Delaware, Newark, DE 19716. (~) 1992 Association for Computational Linguistics Computational Linguistics Volume 18, Number 4 TAG is defined as a tree rewriting system. In the definition given traditionally, a TAG is defined by a finite set of trees and an operation called adjoining to compose trees. One of the basic intuitions underlying the use of the TAG formalism is that these trees provide a large enough structure that most cooccurrence restrictions (dependencies) can be stated over (localized within) these trees. Predicate-argument, wh-dependencies, and filler-gap dependencies are examples of dependencies that can be localized in a TAG.</Paragraph>
<Paragraph position="4"> Our aim is to view a TAG as defining constraints on well-formed structures (according to the linguistic intuitions being instantiated in the grammar). In this paper, we argue that if we chose to interpret the objects manipulated by a TAG as trees (as is done currently) then it is not possible to embed TAG in a unification framework in a straightforward manner. We show that this follows from the fact that the adjoining operation on trees is such that it does not preserve the structural relationships that have been specified in the structures being combined. We argue that instead we should view the objects manipulated (to be distinguished from derived) by a TAG as (partial) descriptions of trees. In particular, these descriptions include the partial specification of domination, as in description theory or D-theory (Marcus, Hindle, and Fleck 1983), in addition to the specification of immediate domination. We argue that this is a well-motivated interpretation that is consistent with certain assumptions made in the lexicalized approach to TAG. We introduce quasi-trees as a means to structurally depict partial specifications of trees. Using this interpretation, we show that the resulting structure obtained after adjoining preserves the structural relationships described in the structures being composed.</Paragraph>
<Section position="1" start_page="0" end_page="482" type="sub_section">
<SectionTitle>
1.1 Outline of the Paper
</SectionTitle>
<Paragraph position="0"> For the sake of contrasting the two definitions, we start by giving the currently used definition of TAG. In Section 2, we show that this definition is not consistent with the assumptions made in the unification framework. We propose a novel way of interpreting the basic objects of a TAG, borrowing ideas from description theory (D-theory).</Paragraph>
<Paragraph position="1"> By means of an example, we introduce the notion of quasi-trees. We then show how TAG can be embedded in a unification-based framework. This interpretation of the objects manipulated by a TAG grammar as quasi-trees not only leads to our current definition of FTAG, but also explains the earlier definition (Vijay-Shanker 1987; Vijay-Shanker and Joshi 1988). In Section 3, we give examples to show why the introduction of feature structures and unification adds to the descriptive capabilities of TAG. In particular, we focus on the implementation of the so-called adjoining constraints (that determine locally which structures can be used for adjoining and whether adjunction is mandatory). We will show that not only can adjoining constraints be specified in a linguistically more appealing manner now, but also that in several cases redundant specifications of structural descriptions can be avoided.</Paragraph>
<Paragraph position="2"> In Section 5, we consider some possible implications of the new interpretation of the formalism proposed here. One particular question that arises is whether the operations of adjoining and even multi-component adjoining (as used in Multi-component Tree Adjoining Grammar) can be considered to be the same as the substitution operation where the characteristics of the adjoining and multi-component adjoining operations can be derived from the fundamental (linguistic) assumptions that concern the make-up of elementary objects of a grammar. Questions related to this issue, such as whether a distinction between initial and auxiliary structures (the two types of basic structures used in a TAG) needs to be made, are also raised. Further work along the lines suggested in this section depends on investigation of certain linguistic issues involved in the use of the TAG formalism that is beyond the scope of this work. A1- null though we provide no definitive answers to these questions, these topics are raised in this paper because they are brought out by the new interpretation of the TAG formalism that we propose.</Paragraph>
<Paragraph position="3"> In Section 4, we propose a logical formulation of FTAG grammars (along the lines of the logical formulation of Functional Unification Grammars given by Rounds and Manaster-Ramer \[1987\]) and then show how the denotation of a b-TAG grammar can be obtained. The logical formulation is given, in part, to show the separation between the descriptions of well-formed structures (as specified in a FTAG grammar) and the models that satisfy these descriptions.</Paragraph>
<Paragraph position="4"> We would like to note that the work presented in this paper concerns a formalism and not linguistic issues. A deliberate attempt has been made to only discuss the TAG formalism in general terms rather than focusing on linguistic issues. By doing so, our intent is to pay closer attention to the formalism itself and uncover the aspects of the definition of TAG that are stipulations and those that fall out as a corollary of a formalism that tries to localize dependencies. The use of linguistic examples in this paper by no means indicates the suitability of any linguistic theories. The only assumption that we make is that a grammar will attempt to localize dependencies to the extent possible.</Paragraph>
</Section>
<Section position="2" start_page="482" end_page="485" type="sub_section">
<SectionTitle>
1.2 Introduction to Tree Adjoining Grammars
</SectionTitle>
<Paragraph position="0"> A Tree Adjoining Grammar (TAG) as defined traditionally is said to be specified by a finite set of elementary trees. Unlike the string rewriting formalisms that write recursion into the rules that generate the phrase structure, a TAG factors recursion and dependencies into a finite set of elementary trees. The elementary trees in a TAG correspond to minimal linguistic structures that localize the dependencies such as subcategorization, and filler-gap. There are two kinds of elementary trees: initial trees and auxiliary trees. Originally, initial trees (e.g., c~1 and OL 2 in Figure 1) were defined to correspond to minimal sentential structures. Therefore, the root of an initial tree was required to be labeled by the symbol S. With the advent of lexicalized TAG and the use of the substitution operation, this assumption is no longer made (see c~3).</Paragraph>
<Paragraph position="1"> Auxiliary trees (ill, t2 in Figure 2) are usually defined to correspond to minimal recursive constructions. Thus, if the root of an auxiliary tree is labeled by a nonterminal  symbol, A, then there is a distinguished node, called the foot node, in the frontier of this tree that is also labeled by A. The foot nodes of auxiliary trees, fll and /32, are indicated with an asterisk.</Paragraph>
<Paragraph position="2"> The adjoining operation is used to compose trees. An auxiliary tree, whose root and foot node are labeled A, can be adjoined at a node that is also labeled A. Adjoining may be described as follows: the subtree below the node of adjunction is excised; the auxiliary tree is inserted in its place; and the excised subtree is substituted at the foot node of the inserted auxiliary tree.</Paragraph>
<Paragraph position="3"> Figure 3 shows the result of adjoining fll at the VP node in OL 1 (to yield 3'I) as well as the adjunction of t32 in O~ 2 to yield ~2. The latter example illustrates a key feature of TAG, i.e., localization of dependencies. The tree oL 2 indicates the topicalization of the object, localizing the filler-gap dependency. Notice that although the dependent nodes (the two nodes labeled NPi) are stretched apart in 3`2, the adjoining operation does not alter any dependency present in the original trees being composed.</Paragraph>
<Paragraph position="4"> 1.2.1 Lexicalized Approach to TAG and Substitution. In the traditional approach to TAG, adjunction was the only operation used to compose trees. In the lexicalized approach to TAG as proposed by Schabes, Abeille, and Joshi (1988), the substitution operation is also used. In this approach, elementary trees are associated with lexical items. These lexical items (indicated by ~) are said to be the anchors of the trees. These trees define the arguments required by the anchor. Figure 1 shows two initial trees ~1 and c~2 whose anchors are transitive verbs. The two trees specify the arguments required by the anchor (a transitive verb) and describe the structure for the simple declarative form and for the case where the object is topicalized. Note in both these trees, the argument (subject and object NP) nodes are not elaborated any further. This elaboration is done instead by substituting other initial trees at these nodes. The tree 3'3 (Figure 3) is the result of substituting o~ 3 at the subject NP node in el. In a lexicalized TAG, frontier nodes labeled by nonterminals (with the exception of foot nodes) are marked for substitution (specified by ~).</Paragraph>
<Paragraph position="5">  auxiliary trees that can be adjoined at a node is that the label of that node must be the same as the label of the root (and the foot) node of the auxiliary tree. However, often it becomes necessary to allow only a subset of such auxiliary trees to be adjoined at  Some examples of adjoining and substitution.</Paragraph>
<Paragraph position="6"> a node. In a TAG, associated with each node is a list of auxiliary trees that can be adjoined at that node. This specification of a set of auxiliary trees with each node is called the Selective Adjoining (SA) constraints of the nodes. A node is said to have a Null Adjoining (NA) constraint if no auxiliary tree is allowed to be adjoined at that node. An NA constraint is specified by associating an empty set with a node. In current TAG literature NA constraints are therefore said to be a special case of SA constraints. In addition, for some nodes it is necessary to insist that adjunction is mandatory at a node. In such a case, we say that the node has an Obligatory Adjoining (OA) constraint.</Paragraph>
<Paragraph position="7"> A more detailed description of TAG, the use of adjoining constraints, their propagation during derivation, and their usefulness in providing linguistic analyses may be found in Kroch and Joshi (1985). At this point we would like to note that by the specification of such adjoining constraints are stipulations of the adjunction possibil- null Computational Linguistics Volume 18, Number 4 ities at that node. On the other hand, we will see that: in the version of FTAG we define here, decisions such as the choice of auxiliary trees that can be adjoined at a node or whether adjunction is mandatory at a node follows from the assertions (stated in terms of feature structures) about the linguistic features of individual nodes, rather than being specific to the adjoining operation. In fact, in this paper, we would like to highlight this issue while addressing the usefulness of this &amp;quot;unification-based approach&amp;quot; to TAG.</Paragraph>
</Section>
</Section>
</Paper>

