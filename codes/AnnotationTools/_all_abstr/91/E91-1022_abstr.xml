<?xml version="1.0" standalone="yes"?>

<Paper uid="E91-1022">
<Title>Generating Sentences from Different Perspectives</Title>
<Section position="1" start_page="0" end_page="0" type="abstr">
<SectionTitle>
Keywords : Generation, Natural Language interfaces.
Abstract
</SectionTitle>
<Paragraph position="0"> Certain pairs or groups of sentences appear to be semantically distinct, yet specify the same underlying state of affairs, from different perspectives. This leads to questions about what that underlying state of affairs might be, and, for generation, how and why the alternative expressions might be produced. This paper looks at how such sentences may be generated in a Natural Language interface to a database system. null Introduction The following sentences would have a different semantics if parsed, yet they seem to specify the same state of affairs at some level of representation. null la. I can stay until 5.</Paragraph>
<Paragraph position="1"> lb. I must leave by 5.</Paragraph>
<Paragraph position="2"> For generation, we ought to be able to produce either. McDonald comments on these sentences :&amp;quot;What mutually known cognitive structure do we recognise from them that would show them to be two sides of the same coin?&amp;quot; (McDonald 1988) This paper describes a language generation system which is designed as the output component of a database interface, and is capable of producing similar synonymous sentences. The architecture relies on a two level semantic representation: one describes data in the system's application database, and plays the role of McDonald's &amp;quot;mutually known cognitive structure&amp;quot;; the other describes the semantics of sentences of Natural Language, and the primitives correspond to specific entries in the lexicon. Information to be communicated is initially expressed in the application level semantics, and is be mapped to the language level semantics as part of the generation process. Alternatives similar to la and lb arise during this mapping, and represent a complexity inherent in language which did not exist in the original data:- they are a property of the description.</Paragraph>
<Paragraph position="3"> Application level information is described by linking it with an event or state (from now on the term &amp;quot;event&amp;quot; will cover both these), for which it provides some parameter. Thus, the origin of a flight could be described by saying that the plane &amp;quot;flies from&amp;quot; the origin. The mapping process exploits a &amp;quot;domain model&amp;quot; which has two parts. The first lays out how non-temporal information is related to domain events. The second describes the temporal characteristics these events using an ontology which is rich enough to capture the temporal semantics of English expressions. Temporal information - 125 from the application is described by first expressing it in a way that relates it to times in the model, and by then attempting to add it to the description of the event which is currently active. The alternatives arise when more than one event can be used.</Paragraph>
<Paragraph position="4"> The temporal ontology is based on a recent theory of temporal semantics developed by Moens and Steedman (1988). This allows a modular representation of the semantics of temporal adverbials like &amp;quot;until&amp;quot; and &amp;quot;by&amp;quot;, and also aids in the generation of tense and aspect. This system looks at the mechanics of how the alternatives can be generated from the initial data, but we will have less to say about choosing between them. Some simple choice criteria are presented, although these do not properly address the issue of what perspective is and how it can be quantified and used. We point to proposals from McDonald (1991) which seem more promising on this front.</Paragraph>
<Paragraph position="5"> In more general terms, this work addresses just one of the many issues involved in mapping between Natural Language descriptions of data and the more restricted representation an application database affords.</Paragraph>
<Paragraph position="6"> Overview The generation system has been designed as the output stage of an airline information system.</Paragraph>
<Paragraph position="7"> The application database holds timetabling data such as plane origins and destinations, departure and arrival times and so on. Input to the generator is a semantic form compiled from database relations. For example :-DEST(BA123,ROME)AARR-TIME(BA i23,2PM) This is an expression of the application level semantics, and states that the destination of flight BA123 is Rome, and that the arrival time is 2 p.m. One of the possible surface level semantic descriptions of this would be is :arrive(BA 123,E)Ain(E,ROME)Aat(E,2PM) Once the information is in this form, it can be handed to a grammatical encoder for production of the surface form. The final sentence for this example would be :-BA123 arrived in Rome at 2 p.m.</Paragraph>
<Paragraph position="8"> In this example, the input data has been described as a point event occurring at a given time. As we will see, other descriptions could view it in other ways, such as a state ending at that time, or as a state beginning at that time. The Domain Model So, database relations may be described by finding events in a model of the domain to which they correspond. This assumes, of course, that the hearer has a similar model of the domain.</Paragraph>
<Paragraph position="9"> Figure 1 (overleaf) shows the model for an airplane flight, giving the various events and states. It shows an agent, A, flying from an origin O, to a destination at D. The state which can be described as &amp;quot;A be at 0&amp;quot; or &amp;quot;A not leave O&amp;quot; leads on to an event of &amp;quot;A leave 0&amp;quot; which initiates a state described as &amp;quot;A not arrive at D&amp;quot;, and so on. The causal relations between the events are included in the model, and used in the generation of tense and aspect, but their use is not described in this paper.</Paragraph>
<Paragraph position="10"> The model is represented declaratively in a Prolog style database. For each event there are two sorts of entry. The first sort record how non-temporal input-data can be translated to event based logical forms. These entries link up the data parameters with the case roles of the event. For example :trans(@E,@Input-sem,@Ling-sem) null The &amp;quot;@&amp;quot; is used here to denote a variable. The first argument is the event index, the second is the semantic form of the input data, and the third is the language level semantics describing the event. An example is :-</Paragraph>
<Paragraph position="12"> The language level event here is that of &amp;quot;arriving&amp;quot;, and is recorded using a Davidsonia.n style semantics (Davidson 1967).</Paragraph>
<Paragraph position="13"> The second sort of entry records the temporal characteristics of the event, using a temporM calculus developed by Moens (1987), and based on Kowalski's event logic (1986). Each event is classified according to its temporal characteristics, and entries in the calculus are made accordingly. The &amp;quot;arrive&amp;quot; event is classified as a culmination type of event, for which, the en-</Paragraph>
<Paragraph position="15"> This characterises the event e5 as a punctual event represented by the single marker &amp;quot;cul(e5)&amp;quot; which occurs at the time T6. The model is a prototypical one for the events of the domain, and actual times are unknown. Instead, tetnporal information is recorded using temporal indices, of which &amp;quot;T6&amp;quot; is an example. A process such as &amp;quot;fly&amp;quot; is represented by two entries, one for the start point, and one for the end.</Paragraph>
<Paragraph position="16"> The model includes a record of the relative times of the indices, and actual times may be included if they become known. The model also includes causal relations between events, which can be used in the generation of tense and aspect. This model has been identified by Moens as capable of capturing the semantics of English temporal expressions more fully thau other formalisms, such McCarthy and Hayes (1969), or Allen (1984).</Paragraph>
<Paragraph position="17"> Semantics of Temporal Adverbials null With this sort of model, the semantics of adverbials may be defined in modular fashion. For instance, &amp;quot;until&amp;quot; is defined as describing the time at the end of a process type of event. So, if a process such as &amp;quot;Jim ran&amp;quot; ends at the time &amp;quot;2 p.m.&amp;quot;, this would be described as &amp;quot;Jim ran until 2 p.m.&amp;quot;. Similar interpretations may be defined for &amp;quot;for&amp;quot;, &amp;quot;in&amp;quot;, &amp;quot;since&amp;quot;, &amp;quot;by&amp;quot;, &amp;quot;later&amp;quot; and so on. An Example An example will show how several different descriptions of the same initial data may be pro- 127 duced using this machinery. Beginning with the input data structure shown previously in the overview, the first step is to split it into temporal and non-temporal data, which is done with a simple set of rewriting rules : null This is mapped onto the model by attaching the temporal data to one (or more if necessary) of the temporal indices, and by inserting the non-temporal data into a &amp;quot;trans&amp;quot; predicate : null A duration, such as the flight time could be attached to two indices using &amp;quot;span(T5,T6,Flighttime)&amp;quot;. null Instantiating the &amp;quot;trans&amp;quot; predicate in the model picks out an event that describes the data. Backtracking allows all possibilities to be produced. In the current model, this picks out four events, giving the linguistic semantics :-</Paragraph>
<Paragraph position="19"> Of these, e3 is characterised as a culminating process (like a process, but with a definite end point) ending at T6, e4 is a state ending at T6, e5 is a culmination occurring at T6, and e6 is a state beginning at T6.</Paragraph>
<Paragraph position="20"> Next, we must describe the temporal data &amp;quot;=(T6,2PM)'. A set of rules looks at the event characteristics, and the data to be expressed, to see which adverb is appropriate. For e4, the &amp;quot;until&amp;quot; adverb is chosen, and added to the semantic form to give :-</Paragraph>
<Paragraph position="22"> Similarly, for e5, the adverbs &amp;quot;at&amp;quot; or &amp;quot;by&amp;quot; can be used, and for e6 &amp;quot;by&amp;quot; or &amp;quot;since&amp;quot;. That &amp;quot;since&amp;quot; is only used if conditions for the perfect also hold. Insufficient space prevents discussion of the details here. No adverb is available to describe the end time of a culminating process, and so no phrase can be built using e3.</Paragraph>
<Paragraph position="23"> The successful cases could eventually be realised as :2a. BA123 didn't arrive at Rome until 2 p.m.</Paragraph>
<Paragraph position="24"> 2b. BA123 arrived at Rome at 2 p.m.</Paragraph>
<Paragraph position="25"> 2c. BA123 arrived at Rome by 2 p.m.</Paragraph>
<Paragraph position="26"> 2d. BA123 was at Rome by 2 p.m.</Paragraph>
<Paragraph position="27"> If conditions for using the perfect held, the last of these could be replaced by :2e. BA123 has been at Rome since 2 p.m.</Paragraph>
<Paragraph position="28"> Choosing Between The Alternatives null For the question answering system, several criteria are being investigated for choosing between the alternatives. The first is a simple mirroring of the phrasing of the question, the syntactic and semantic analysis of the question being retained in the discourse model. For example :3a. User: When will BA123 be at Rome? 3b. System: It will be at Rome by 2 p.m.</Paragraph>
<Paragraph position="29"> The main verb of the question is &amp;quot;be&amp;quot; with a subject of &amp;quot;BA123&amp;quot;. One of the possible descriptions uses the same verb and subject (albeit pronominalised), and would be the chosen alternative. This criteria is used when the generated sentence is simply supplying new information which the user has requested.</Paragraph>
<Paragraph position="30"> A second criteria seems to be useful when the answer violates a presupposition detected in the query. For example, take the question :- 128 4a. User: Will BA123 be at Rome by noon? This includes the presupposition that BA123 arrives at noon. If it doesn't, the best form for the answer seems to depend on the actual time of arrival.</Paragraph>
<Paragraph position="31">  Construction 4b would be chosen if the pre-supposed time lay before the arrival time, and thus within the timespan covered by the state &amp;quot;not arrive&amp;quot;. On the other hand, construction 4c would be chosen if the pre-supposed time lay after the actual time, placing it within the timespan covered by the state &amp;quot;be at Rome&amp;quot;. Finally, the alternatives could be useful to promote cohesion in multi sentence explanations of the following sort :5a. BA123 won't be here until noon. It was delayed at Paris.</Paragraph>
<Paragraph position="32"> 5b. BA123 arrives at noon. It will taxi to Terminal 3.</Paragraph>
<Paragraph position="33"> The second sentence is an explanation or elaboration of the first. In the first example, the explanation refers to an event located in the time period before the arrival, and in the second, it is more closely associated with the arrival time. The description of the arrival time is chosen to reflect this.</Paragraph>
<Paragraph position="34"> Related work and Discussion In a description of the process of language given by Levelt (1989), a module called &amp;quot;micro-planning&amp;quot; is included. This module comes after the content of the output has been decided on, and before grammatical encoding. Micro-planning consists of choosing the language related semantic primitives used for describing a data structure which is not linguistically based. Levelt notes that, because of the nature of language, this process will be forced to make choices of perspective. Much work on generation has assumed that the input semantic form is already in some sort of &amp;quot;languagese&amp;quot; (see, for example McDonald 1983, McKeown 1985), but the processing described in this paper would be part of the micro-planner.</Paragraph>
<Paragraph position="35"> There are several precedents for the use of two level semantic descriptions for generation. The first, perhaps, was HAM-ANS (Wahlster 1983),in which the generator translated from the language DEEP to the language SURF. More recently there has been the TENDUM system (Bunt 1987), using the model theoretic logical languages EL/F and EL/R, and others (Kernpen 1987, De Roeck 1986). These systems translated between the levels, but did not address the issues of alternative mappings.</Paragraph>
<Paragraph position="36"> However, this question has been investigated by McDonald (1991). He has proposed a solution in which the data structures of the application program (a diary manager) are based on primitives such as &amp;quot;transition-at-4PM&amp;quot;. These primitives are then linked to sets of lexemes such as \[stay, until\] and \[leave,at\]. One of these sets is selected and included in evolving text structure. This doesn't seem to take account of the nature of the the events described by &amp;quot;leave&amp;quot; and &amp;quot;stay&amp;quot;, or the temporal semantics involved in using adverbials like &amp;quot;at&amp;quot; and &amp;quot;until&amp;quot;. null McDonald does, however, address the important issue of the criteria for choosing between alternatives. The choice of perspective is intimately bound up with the reasoning of the manager, which can use knowledge about intentions and surrounding events to decide which version of the description is the most appropriate. This sort of approach seems to be necessary for the development of more comprehensive choice criteria.</Paragraph>
<Paragraph position="37"> Conclusion This paper describes a generation system which is capable of generating A range of Natural Language descriptions of the output of a database enquiry program. The system uses a two level model of semantics. The possibility of alternative descriptions arises from the mapping be* . 129 tween the two levels. Some simple criteria are used to choose the alternative which fits best into the dialogue context.</Paragraph>
</Section>
</Paper>

