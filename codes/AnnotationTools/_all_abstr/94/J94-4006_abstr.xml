<?xml version="1.0" standalone="yes"?>

<Paper uid="J94-4006">
<Title>Squibs and Discussions Storing Logical Form in a Shared-Packed Forest</Title>
<Section position="1" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> There are several types of ambiguity in natural languages, including lexical ambiguity, syntactic (or structural) ambiguity, quantifier scope ambiguity, and anaphora (or ambiguity of reference). Each type of ambiguity must be resolved for a natural language understanding program to be effective. Since syntax often limits the possible meanings of a sentence (and the words in the sentence), natural language processing programs often analyze the structure of a sentence before attempting to determine its meaning. However, additional knowledge sources must often be used in understanding, including selectional restrictions, world knowledge, and contextual information.</Paragraph>
<Paragraph position="1"> The use of world knowledge and contextual information often requires inference and hence access to the representations of the sentence and possibly its components. But at the same time, because of ambiguity, a program might not be able to enumerate all of the possible representations for a sentence and its components, since just listing all possible structural analyses for syntactically ambiguous sentences can be impractical, and each structural analysis of a sentence typically produces at least one additional meaning.</Paragraph>
<Paragraph position="2"> In this paper, we will focus on the problem of efficiently maintaining syntactic ambiguity while determining the logical representation for a sentence. In particular, we describe an approach that combines shared-packed parse forests with semantic construction routines. This approach allows a program attempting to eliminate ambiguity from a sentence to apply higher level knowledge sources to the logical representations of desired constituents in the parse forest (e.g., it could eliminate alternative parses for a noun phrase (NP) whose representation does not match objects in a world model).</Paragraph>
<Paragraph position="3"> 2. Methods of Handling Syntactic Ambiguity Tree structures, called parse trees, are often used to represent the structural properties of a sentence. Because language is often syntactically ambiguous, it is common for a particular sentence to have more than one parse tree. For example, the sentence, Every man saw the boy with his binoculars, has two potential parses. In one parse, the prepositional phrase (PP) with his binoculars is attached to the verb phrase (VP). In the other, it is attached to the object (NP). These two structures give rise to very different meanings for the sentence. In the first case, every man is using the binoculars to see the boy; whereas in the second, the boy has the binoculars.</Paragraph>
<Paragraph position="4"> One way to enable a natural language program to process the meanings of syntactically ambiguous sentences is to incorporate semantic construction routines into a * School of Electrical Engineering, 1285 Electrical Engineering Building, Purdue University, West Lafayette, IN 47907-1285, USA.</Paragraph>
<Paragraph position="5"> Q 1994 Association for Computational Linguistics Computational Linguistics Volume 20, Number 4 parser that produces each structural analysis for a sentence, one parse tree at a time, and maps each tree to a separate logical representation. The program must then attempt to determine which meaning for the sentence is the intended one. One problem with this approach is that the number of parse trees produced for some ambiguous sentences is quite large. For example, a parser analyzing sentences with multiple PPs can produce a prohibitively large number of possible parses for the sentence. As the number of PPs in a sentence increases, the number of possible parse trees and their corresponding representations grows as the Catalan numbers, C,, = \[2n~ 1 (Church \ n ,' n+l and Patil 1982). For example, a sentence with one object and four post-object PPs (i.e., n = 5) has 42 parses. Since the number of parses for a sentence with multiple PPs grows faster than exponentially (Knuth 1975), the time to list all possible trees and their corresponding meanings can be prohibitive. A one-parse-tree-at-a-time approach that uses no mechanism for storing subresults from a parse (e.g., a chart or parse forest) is inefficient because it cannot reuse the results of the semantic and contextual tests made on a subtree of a rejected parse during the evaluation of an alternative parse tree. The need for efficiency dictates the need for another approach to manage the ambiguity of a sentence.</Paragraph>
<Paragraph position="6"> The efficiency of this approach can be improved by resolving each indeterminacy in the parse as soon as it arises to prevent backtracking (Briscoe 1987). However, this requires that enough information be available at that point in the parse to select among the alternatives. In many cases, this requirement cannot be met; words occurring later in the sentence or possibly in subsequent sentences may be needed to resolve the ambiguity. A slightly different alternative is to work with the highest preference choice only (Alshawi 1990; Briscoe and Carroll 1993). Although this approach is efficient, it provides only the most likely parse (independently of context), not necessarily the correct parse.</Paragraph>
<Paragraph position="7"> An alternative scheme for coping with syntactic ambiguity is to change the grammar rules so that they provide a single parse tree for a syntactically ambiguous sentence and then wait for the semantic routines to pinpoint the parse. To illustrate this strategy, consider a common way to write a rule for an NP with noun modifiers:</Paragraph>
<Paragraph position="9"> This grammar generates a very large number of possible structures for NPs like the computer science school book. However, it also eliminates from consideration impossible noun modifier structures by not allowing crossover between modifiers. For example, the grammar would never allow a structure such that computer modifies school, which modifies book, and science modifies book. On the other hand, an alternative rule can be used to generate a single structural analysis for the sentence, as shown below:</Paragraph>
</Section>
</Paper>

