<?xml version="1.0" standalone="yes"?>

<Paper uid="C94-2137">
<Title>Fr6d~rique Segond</Title>
<Section position="1" start_page="0" end_page="853" type="abstr">
<SectionTitle>
Abstract
</SectionTitle>
<Paragraph position="0"> To deal with long-distance dependencies, Applicative Universal Grammar (AUG) proposes a new type of categorial rides, called superposition rules. We compare the AUG rules with the alternative rules of Steedman's Combinatery Categorial Grammar (CCG) (Steedman, 1987, 1988, 1990; Szabolcsi, 1987; Ades and Steedman, 1982). In contrast to Steedtmm's rules, the AUG rules are free from inconsistencies in their semantic interpretation, fi'ee from spurious ambiguity. &amp;quot;lhe superposition rules arc based on the Theory of Type Supetposition, established independently of the problem of long-distance dependencies and having a broad unifying power.</Paragraph>
<Paragraph position="1"> I. Characterization of Applicative</Paragraph>
<Section position="1" start_page="0" end_page="853" type="sub_section">
<SectionTitle>
Universal Grammar
</SectionTitle>
<Paragraph position="0"> Applicative Universal Grmnmar (AUG) is a linguistic theory that uses the lormalism of catcgorial g~unmar ,as a means for representing the structure of language. AUG has two levElS: 1) lhe study of the grammatical slructurc in itsclt (genotype grammar), ~md 2) the study of the linear representation of the grammatical structure (phenotype grammar). AUG includes a system of combinators (Curry and Feys, 1958) ,'rod fi)nnulates semiotic concepts, principles, and laws that dctcnninc tile fimctioning of natur~d languages ,as sign systems (for a complete description of AUG, see Shaumyan, 1974, 1977, 1987; Dcsci6s, 1990; Scgond, 1990a; some applications of AI \]G arc discussed in Shaumyan 1989, 1991).</Paragraph>
<Paragraph position="1"> AUG is based on the relation operator-operand, which corresponds to the relation fi~nction-argument in categorial grmnmar. We prefer the terms operator-operand for reasons similar to those given by llindley and Seldin (1986, pp. 44-45). In AI IG categories are generated rccursively by the type-forming operator O, and are called O-types. AUG recognizes two primitive types--terms (nouns and noun-phrases) and sentences, denoted by t mid s, respectively. The rule for generating O-types is:  1) The primitive types t and s are O-types.</Paragraph>
<Paragraph position="2"> 2) If x and y m'e O-types, then Oxy is an O-lype. (1)  For the sake of brevity, we use the term type in the sense of the O-type. Taking t and s as primitives, wc generate the inductive class of types: t, s, Ott, Oss, Ots, Ost, OtOts, OOtsOts, and so on.</Paragraph>
<Paragraph position="3"> In representing the types we u~ the parentheses-free Polish notation, which is more convenient than Curry's nolation with internal parentheses.</Paragraph>
<Paragraph position="4"> The basic rule of combination of phrases is the Rule of Phrase Application, which is defined as follows: Phrase A of type Oxy, called an operator, combines with phrase B of type x, called its operand, to form phrase AB of type y, called its resultant:</Paragraph>
<Paragraph position="6"> The applicative tree of (2) has the form:</Paragraph>
<Paragraph position="8"> &amp;quot;llm concept of immediate constituents is defined as: If phrase A is ml operator and phm~ B is its operand, then they ,are inunediate constituenls of file resultant (AB). (4) The concept of closeness is defined as: (liven phrases A and B that are immediate constituents of phrase (AB), if A is a complex phrase comprising immcdiate constituents C and D, then the syntactic and semantic connEction between C and D is closer than the syntactic m~d scmanlic connection between A and B. (5) Under definition (5) various degrees of relative closeness of syntactic and semantic connection between immediate constituents me distinguished depending on the complexity of a phrase.</Paragraph>
<Paragraph position="9"> in phenotype grmnmm&amp;quot; the application operation is constrained by two principles: the Principle of Adjacency of Operators and Their Operands and the Principle of Uniqueness of hmnediate Constituents.</Paragraph>
<Paragraph position="10"> l'rinciple of Adjacency of Operators and Their Operands: An operator and its operand must be adjacent elements of a sequence, so that tile operator either directly precedes or directly follows its oper,-md. (6) Under file Adjacency l'rinciplc we have two new rules -the notational wuiants of operator application: one for torward combination mid one for backward combination:</Paragraph>
<Paragraph position="12"></Paragraph>
<Paragraph position="14"> These rules are called the Linear Precedence Rules'. An alternative notation for these rules splits the type-forming operator O iuto indexed type-fot~ning operators O r and 0 l which generate types of the form Orxy and Otxy. The operator of type O~xy has its operand on its right, and file operator of type OtxY has its operand on its left. So the Linear Precedence Rules may be presented as follows:</Paragraph>
<Paragraph position="16"> llere is an exmnple of applying this notation: OrtOtts bought t newspapers t John Ods bought newspapers s John bought newspapers (11) Given file Rule of Phrase Application and Linear Prccedence Rules, we can combine tile two rule formats into one system, as is done with the corresponding rule formats in Generalized Phrase Structure Greanmar (Gazdar et al., 1985: 44-50).</Paragraph>
<Paragraph position="17"> Principle of Uniqueness of immediate Constituents': If phrase A aud phrase B are immediate constituents of phrase C, then neither A uor B can be an immediate constituent of another phrase D. (12) qb illustrate, consider the sentence: John loves vodka. Here loves and vodka are the immediate constituents of (loves vodka), enid John.aud (loves vodka) are tile hnmediate constituents of (John (loves vodka)), tinder the alxwe constraint, this analysis precludes analyzing this sentence as: ((John loves) vodka).</Paragraph>
<Paragraph position="18"> In terms of &amp;quot;algebra, the Principle of Uniqueness of hnmediate Constituents con'esponds to non-associativity: AUG is a non-associative system.</Paragraph>
<Paragraph position="19"> To make the AUG notation compact, we introduce recursively defined adjoined symbols (Shaumyan 1987: 199): A type symbol is called adjoined if it is introduced into tile type system by a definition of file form:</Paragraph>
<Paragraph position="21"> where z denotes ,'m adjoined type and Oxy denotes a type where x and y are either other ,adjoined type symbols, oft, ors. (13) This type of definition is called definitional reduction. By this process all adjoined type symbols are defined ill terms of the uithnate definientia t ,'rod s. We can introduce as many adjoined type symbols as we need. llere are examples of the definitional reduction for adjoined type symbols that will be used below:</Paragraph>
<Paragraph position="23"> AUG clahns that a typology of word order must be based on a comparison of specific word orders in individual languages with a canonical word order as defined in genotype gr,-anmar. The canonical word order requires that an operator precedes its adjacent operand. For ex,'unple, the canonical form of file sentence My older brother bought an interesting book yesterday is: (yesterday ((bought (an (interesting book))) (my (oMer brother)))).</Paragraph>
</Section>
</Section>
</Paper>

