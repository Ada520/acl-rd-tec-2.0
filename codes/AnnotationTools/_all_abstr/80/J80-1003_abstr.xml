<?xml version="1.0" standalone="yes"?>

<Paper uid="J80-1003">
<Title>Slot Grammars</Title>
<Section position="2" start_page="0" end_page="0" type="abstr">
<SectionTitle>
1. Introduction
</SectionTitle>
<Paragraph position="0"> This paper presents a formalism for natural language grammars, with accompanying parser. The grammars are called slot grammars because they are organized around slots (grammatical relations) and rules for filling them. The parser works bottom-up and maintains, for each phrase being built up, a list called the available slots list, ASLOTS. A phrase can grow by having one of the slots in its ASLOTS list filled by a suitable adjoining phrase.</Paragraph>
<Paragraph position="1"> As a phrase grows, its ASLOTS list generally shrinks, because slots are ordinarily removed from ASLOTS as they get filled. However, a slot can be marked as multiple and then receive more than one filler. A more interesting exception to the shrinking of ASLOTS is that the procedure for filling a slot may operate on ASLOTS itself and add new slots to it. The operation of raising builds such new slots as &amp;quot;copies&amp;quot; of slots in the ASLOTS list of a filler phrase. Certain standard grammatical constructions, such as WH-movement, can be handled with this raising operation.</Paragraph>
<Paragraph position="2"> The parser processes the words of a sentence from left to right, at each stage working out all the slot-fillings that develop when the new word is thrown in with the phrases that have already been built up. However, a given phrase grows middle-out.</Paragraph>
<Paragraph position="3"> Its history begins with a word which is its head, and its slot-fillers may be adjoined on the left or the right. A left-adjunction, if appropriate, is made immediately, because the filler already exists; but a right-adjunction waits till more words have been processed. Middle-out construction allows more data-directed control. For instance, the initial value of the ASLOTS list of a phrase is determined partially by the lexical entry for its head word.</Paragraph>
<Paragraph position="4"> In computational linguistic background, the system is most closely related to the augmented phrase structure grammars (APSG's) of George Heidorn (1972,1975). In APSG's, syntactic and semantic slots (relation attributes) are heavily used, though not as systematically as in slot grammars, because the APSG system does not maintain an ASLOTS list. The APSG parsing algorithms are bottom-up; and in the sample grammars, phrases are usually built up in a middle-out fashion, starting with a head word and adjoining items on the left or the right.</Paragraph>
<Paragraph position="5"> Although slot grammars are organized mainly around slots, they also make use of states, and thus have a relationship to the augmented transition networks (ATN's) of Woods (1970,1973). But the use of states in slot grammars is much more constrained than in ATN's, and, in general, slot grammars are contrasted with ATN's in the paper.</Paragraph>
<Paragraph position="6"> On the linguistic side, the theory proposed is most closely related to work in the systemic grammar tradition (Hudson, 1971,1976; McCord, 1975, 1977), especially to Hudson's theory of daughter-dependency grammar (Hudson, 1976). 1 The work of Kac (1978) is also related; and there are some connections to the tradition of Kenneth Pike and Charles Fries (Cook, 1969), at least in the basic notion of slot and filler.</Paragraph>
<Paragraph position="7"> The paper is intended as a contribution to natural language syntax and parsing. Very little is said about semantics. However, the system could readily 1 I wish to thank Richard Hudson for many useful discussions pertinent to the present work.</Paragraph>
<Paragraph position="8"> Copyright 1980 by the Association for Computational Linguistics. Permission to copy without fee all or part of this material is granted provided that the copies are not made for direct commercial advantage and the Journal reference and this copyright notice are included on the first page. To copy otherwise, or to republish, requires a fee and/or specific permission. 0362-613X/80/010031-13 $01.00 American Journal of Computational Linguistics, Volume 6, Number 1, January-March 1980 31 Michael C. McCord Slot Grammars be augmented with procedures that build up semantic interpretations along with syntactic analyses. In such a &amp;quot;complete&amp;quot; system, semantic and pragmatic knowledge would be applied concurrently with syntactic knowledge; but syntax would still play a guiding role in the processing.</Paragraph>
<Paragraph position="9"> Section 2 of the paper, The centrality of slots, argues for the advantages of an ASLOTS list, mainly in connection with verb dependencies, unbounded movement rules, and conjunctions. Section 3, States and slots, explains how states are used and basically how slot-filling takes place. A simple diagrammatic notation for slot grammars is introduced. Section 4, Formal representation of syntax, describes the form of the input of syntax to the program (which is written in LISP). Section 5, Representation of frames by the system, gives details of the data structures used by the system. Section 6, The lexicon, describes the formal representation of the lexicon, and argues for some of the advantages of data-directed control.</Paragraph>
<Paragraph position="10"> Section 7 is an Outline of the parsing algorithm. Section 8 gives A sample grammar and discusses some of the linguistic choices made in it. Section 9 is a Summary of the characteristics of the system.</Paragraph>
</Section>
</Paper>

